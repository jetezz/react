import {
  SelectableContext_default,
  makeEventKey,
  useEventCallback
} from "./chunk-ZMWUNPV4.js";
import {
  require_warning
} from "./chunk-HF4IY3LX.js";
import {
  SafeAnchor_default
} from "./chunk-HH5TEXI7.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  require_classnames,
  useBootstrapPrefix
} from "./chunk-TBBU4YOC.js";
import {
  require_react
} from "./chunk-YNCU75EO.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/react-bootstrap/esm/NavLink.js
var import_classnames2 = __toESM(require_classnames());
var import_react3 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AbstractNavItem.js
var import_classnames = __toESM(require_classnames());
var import_react2 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/react-bootstrap/esm/NavContext.js
var import_react = __toESM(require_react());
var NavContext = import_react.default.createContext(null);
NavContext.displayName = "NavContext";
var NavContext_default = NavContext;

// node_modules/react-bootstrap/esm/AbstractNavItem.js
var defaultProps = {
  disabled: false
};
var AbstractNavItem = import_react2.default.forwardRef(function(_ref, ref) {
  var active = _ref.active, className = _ref.className, eventKey = _ref.eventKey, onSelect = _ref.onSelect, onClick = _ref.onClick, Component = _ref.as, props = _objectWithoutPropertiesLoose(_ref, ["active", "className", "eventKey", "onSelect", "onClick", "as"]);
  var navKey = makeEventKey(eventKey, props.href);
  var parentOnSelect = (0, import_react2.useContext)(SelectableContext_default);
  var navContext = (0, import_react2.useContext)(NavContext_default);
  var isActive = active;
  if (navContext) {
    if (!props.role && navContext.role === "tablist")
      props.role = "tab";
    var contextControllerId = navContext.getControllerId(navKey);
    var contextControlledId = navContext.getControlledId(navKey);
    true ? (0, import_warning.default)(!contextControllerId || !props.id, "[react-bootstrap] The provided id '" + props.id + "' was overwritten by the current navContext with '" + contextControllerId + "'.") : void 0;
    true ? (0, import_warning.default)(!contextControlledId || !props["aria-controls"], "[react-bootstrap] The provided aria-controls value '" + props["aria-controls"] + "' was overwritten by the current navContext with '" + contextControlledId + "'.") : void 0;
    props["data-rb-event-key"] = navKey;
    props.id = contextControllerId || props.id;
    props["aria-controls"] = contextControlledId || props["aria-controls"];
    isActive = active == null && navKey != null ? navContext.activeKey === navKey : active;
  }
  if (props.role === "tab") {
    if (props.disabled) {
      props.tabIndex = -1;
      props["aria-disabled"] = true;
    }
    props["aria-selected"] = isActive;
  }
  var handleOnclick = useEventCallback(function(e) {
    if (onClick)
      onClick(e);
    if (navKey == null)
      return;
    if (onSelect)
      onSelect(navKey, e);
    if (parentOnSelect)
      parentOnSelect(navKey, e);
  });
  return import_react2.default.createElement(Component, _extends({}, props, {
    ref,
    onClick: handleOnclick,
    className: (0, import_classnames.default)(className, isActive && "active")
  }));
});
AbstractNavItem.defaultProps = defaultProps;
var AbstractNavItem_default = AbstractNavItem;

// node_modules/react-bootstrap/esm/NavLink.js
var defaultProps2 = {
  disabled: false,
  as: SafeAnchor_default
};
var NavLink = import_react3.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, disabled = _ref.disabled, className = _ref.className, href = _ref.href, eventKey = _ref.eventKey, onSelect = _ref.onSelect, as = _ref.as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "disabled", "className", "href", "eventKey", "onSelect", "as"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "nav-link");
  return import_react3.default.createElement(AbstractNavItem_default, _extends({}, props, {
    href,
    ref,
    eventKey,
    as,
    disabled,
    onSelect,
    className: (0, import_classnames2.default)(className, bsPrefix, disabled && "disabled")
  }));
});
NavLink.displayName = "NavLink";
NavLink.defaultProps = defaultProps2;
var NavLink_default = NavLink;

// node_modules/dom-helpers/esm/querySelectorAll.js
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}

// node_modules/@restart/hooks/esm/useMergedRefs.js
var import_react4 = __toESM(require_react());
var toFnRef = function toFnRef2(ref) {
  return !ref || typeof ref === "function" ? ref : function(value) {
    ref.current = value;
  };
};
function mergeRefs(refA, refB) {
  var a = toFnRef(refA);
  var b = toFnRef(refB);
  return function(value) {
    if (a)
      a(value);
    if (b)
      b(value);
  };
}
function useMergedRefs(refA, refB) {
  return (0, import_react4.useMemo)(function() {
    return mergeRefs(refA, refB);
  }, [refA, refB]);
}
var useMergedRefs_default = useMergedRefs;

export {
  qsa,
  NavContext_default,
  useMergedRefs_default,
  AbstractNavItem_default,
  NavLink_default
};
//# sourceMappingURL=chunk-FB4GAGNE.js.map

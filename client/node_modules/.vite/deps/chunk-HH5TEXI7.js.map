{
  "version": 3,
  "sources": ["../../react-bootstrap/esm/SafeAnchor.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport createChainedFunction from './createChainedFunction';\n\nfunction isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * There are situations due to browser quirks or Bootstrap CSS where\n * an anchor tag is needed, when semantically a button tag is the\n * better choice. SafeAnchor ensures that when an anchor is used like a\n * button its accessible. It also emulates input `disabled` behavior for\n * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.\n */\n\n\nvar SafeAnchor = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'a' : _ref$as,\n      disabled = _ref.disabled,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"disabled\", \"onKeyDown\"]);\n\n  var handleClick = function handleClick(event) {\n    var href = props.href,\n        onClick = props.onClick;\n\n    if (disabled || isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (isTrivialHref(props.href)) {\n    props.role = props.role || 'button'; // we want to make sure there is a href attribute on the node\n    // otherwise, the cursor incorrectly styled (except with role='button')\n\n    props.href = props.href || '#';\n  }\n\n  if (disabled) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    onClick: handleClick,\n    onKeyDown: createChainedFunction(handleKeyDown, onKeyDown)\n  }));\n});\nSafeAnchor.displayName = 'SafeAnchor';\nexport default SafeAnchor;"],
  "mappings": ";;;;;;;;;;;;;;;AAEA,mBAAkB;AAGlB,SAAS,cAAc,MAAM;AAC3B,SAAO,CAAC,QAAQ,KAAK,KAAK,MAAM;AAClC;AAUA,IAAI,aAA0B,aAAAA,QAAM,WAAW,SAAU,MAAM,KAAK;AAClE,MAAI,UAAU,KAAK,IACf,YAAY,YAAY,SAAS,MAAM,SACvC,WAAW,KAAK,UAChB,YAAY,KAAK,WACjB,QAAQ,8BAA8B,MAAM,CAAC,MAAM,YAAY,WAAW,CAAC;AAE/E,MAAI,cAAc,SAASC,aAAY,OAAO;AAC5C,QAAI,OAAO,MAAM,MACb,UAAU,MAAM;AAEpB,QAAI,YAAY,cAAc,IAAI,GAAG;AACnC,YAAM,eAAe;AAAA,IACvB;AAEA,QAAI,UAAU;AACZ,YAAM,gBAAgB;AACtB;AAAA,IACF;AAEA,QAAI,SAAS;AACX,cAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAEA,MAAI,gBAAgB,SAASC,eAAc,OAAO;AAChD,QAAI,MAAM,QAAQ,KAAK;AACrB,YAAM,eAAe;AACrB,kBAAY,KAAK;AAAA,IACnB;AAAA,EACF;AAEA,MAAI,cAAc,MAAM,IAAI,GAAG;AAC7B,UAAM,OAAO,MAAM,QAAQ;AAG3B,UAAM,OAAO,MAAM,QAAQ;AAAA,EAC7B;AAEA,MAAI,UAAU;AACZ,UAAM,WAAW;AACjB,UAAM,eAAe,IAAI;AAAA,EAC3B;AAEA,SAAoB,aAAAF,QAAM,cAAc,WAAW,SAAS;AAAA,IAC1D;AAAA,EACF,GAAG,OAAO;AAAA,IACR,SAAS;AAAA,IACT,WAAW,8BAAsB,eAAe,SAAS;AAAA,EAC3D,CAAC,CAAC;AACJ,CAAC;AACD,WAAW,cAAc;AACzB,IAAO,qBAAQ;",
  "names": ["React", "handleClick", "handleKeyDown"]
}

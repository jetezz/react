import {
  require_all
} from "./chunk-BAEC7GPM.js";
import {
  require_warning
} from "./chunk-HF4IY3LX.js";
import {
  require_prop_types
} from "./chunk-XSPH2NME.js";
import {
  createWithBsPrefix
} from "./chunk-XIHBJ5VB.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  require_classnames,
  useBootstrapPrefix
} from "./chunk-TBBU4YOC.js";
import {
  require_react
} from "./chunk-YNCU75EO.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/react-bootstrap/esm/Form.js
var import_classnames13 = __toESM(require_classnames());
var import_react15 = __toESM(require_react());

// node_modules/react-bootstrap/esm/FormCheck.js
var import_classnames4 = __toESM(require_classnames());
var import_all = __toESM(require_all());
var import_react5 = __toESM(require_react());

// node_modules/react-bootstrap/esm/Feedback.js
var import_classnames = __toESM(require_classnames());
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var propTypes = {
  /**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */
  type: import_prop_types.default.string,
  /** Display feedback as a tooltip. */
  tooltip: import_prop_types.default.bool,
  as: import_prop_types.default.elementType
};
var Feedback = import_react.default.forwardRef(
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  function(_ref, ref) {
    var _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, className = _ref.className, _ref$type = _ref.type, type = _ref$type === void 0 ? "valid" : _ref$type, _ref$tooltip = _ref.tooltip, tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip, props = _objectWithoutPropertiesLoose(_ref, ["as", "className", "type", "tooltip"]);
    return import_react.default.createElement(Component, _extends({}, props, {
      ref,
      className: (0, import_classnames.default)(className, type + "-" + (tooltip ? "tooltip" : "feedback"))
    }));
  }
);
Feedback.displayName = "Feedback";
Feedback.propTypes = propTypes;
var Feedback_default = Feedback;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var import_classnames2 = __toESM(require_classnames());
var import_react3 = __toESM(require_react());

// node_modules/react-bootstrap/esm/FormContext.js
var import_react2 = __toESM(require_react());
var FormContext = import_react2.default.createContext({
  controlId: void 0
});
var FormContext_default = FormContext;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var FormCheckInput = import_react3.default.forwardRef(function(_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, _ref$type = _ref.type, type = _ref$type === void 0 ? "checkbox" : _ref$type, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, isStatic = _ref.isStatic, _ref$as = _ref.as, Component = _ref$as === void 0 ? "input" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["id", "bsPrefix", "bsCustomPrefix", "className", "type", "isValid", "isInvalid", "isStatic", "as"]);
  var _useContext = (0, import_react3.useContext)(FormContext_default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, "custom-control-input"] : [bsPrefix, "form-check-input"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  return import_react3.default.createElement(Component, _extends({}, props, {
    ref,
    type,
    id: id || controlId,
    className: (0, import_classnames2.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid", isStatic && "position-static")
  }));
});
FormCheckInput.displayName = "FormCheckInput";
var FormCheckInput_default = FormCheckInput;

// node_modules/react-bootstrap/esm/FormCheckLabel.js
var import_classnames3 = __toESM(require_classnames());
var import_react4 = __toESM(require_react());
var FormCheckLabel = import_react4.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, htmlFor = _ref.htmlFor, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "bsCustomPrefix", "className", "htmlFor"]);
  var _useContext = (0, import_react4.useContext)(FormContext_default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, "custom-control-label"] : [bsPrefix, "form-check-label"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  return import_react4.default.createElement("label", _extends({}, props, {
    ref,
    htmlFor: htmlFor || controlId,
    className: (0, import_classnames3.default)(className, bsPrefix)
  }));
});
FormCheckLabel.displayName = "FormCheckLabel";
var FormCheckLabel_default = FormCheckLabel;

// node_modules/react-bootstrap/esm/FormCheck.js
var FormCheck = import_react5.default.forwardRef(function(_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, _ref$inline = _ref.inline, inline = _ref$inline === void 0 ? false : _ref$inline, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, _ref$feedbackTooltip = _ref.feedbackTooltip, feedbackTooltip = _ref$feedbackTooltip === void 0 ? false : _ref$feedbackTooltip, feedback = _ref.feedback, className = _ref.className, style = _ref.style, _ref$title = _ref.title, title = _ref$title === void 0 ? "" : _ref$title, _ref$type = _ref.type, type = _ref$type === void 0 ? "checkbox" : _ref$type, label = _ref.label, children = _ref.children, propCustom = _ref.custom, _ref$as = _ref.as, as = _ref$as === void 0 ? "input" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["id", "bsPrefix", "bsCustomPrefix", "inline", "disabled", "isValid", "isInvalid", "feedbackTooltip", "feedback", "className", "style", "title", "type", "label", "children", "custom", "as"]);
  var custom = type === "switch" ? true : propCustom;
  var _ref2 = custom ? [bsCustomPrefix, "custom-control"] : [bsPrefix, "form-check"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  var _useContext = (0, import_react5.useContext)(FormContext_default), controlId = _useContext.controlId;
  var innerFormContext = (0, import_react5.useMemo)(function() {
    return {
      controlId: id || controlId,
      custom
    };
  }, [controlId, custom, id]);
  var hasLabel = custom || label != null && label !== false && !children;
  var input = import_react5.default.createElement(FormCheckInput_default, _extends({}, props, {
    type: type === "switch" ? "checkbox" : type,
    ref,
    isValid,
    isInvalid,
    isStatic: !hasLabel,
    disabled,
    as
  }));
  return import_react5.default.createElement(FormContext_default.Provider, {
    value: innerFormContext
  }, import_react5.default.createElement("div", {
    style,
    className: (0, import_classnames4.default)(className, bsPrefix, custom && "custom-" + type, inline && bsPrefix + "-inline")
  }, children || import_react5.default.createElement(import_react5.default.Fragment, null, input, hasLabel && import_react5.default.createElement(FormCheckLabel_default, {
    title
  }, label), (isValid || isInvalid) && import_react5.default.createElement(Feedback_default, {
    type: isValid ? "valid" : "invalid",
    tooltip: feedbackTooltip
  }, feedback))));
});
FormCheck.displayName = "FormCheck";
FormCheck.Input = FormCheckInput_default;
FormCheck.Label = FormCheckLabel_default;
var FormCheck_default = FormCheck;

// node_modules/react-bootstrap/esm/FormFile.js
var import_classnames7 = __toESM(require_classnames());
var import_react8 = __toESM(require_react());
var import_all2 = __toESM(require_all());

// node_modules/react-bootstrap/esm/FormFileInput.js
var import_classnames5 = __toESM(require_classnames());
var import_react6 = __toESM(require_react());
var FormFileInput = import_react6.default.forwardRef(function(_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, isValid = _ref.isValid, isInvalid = _ref.isInvalid, lang = _ref.lang, _ref$as = _ref.as, Component = _ref$as === void 0 ? "input" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["id", "bsPrefix", "bsCustomPrefix", "className", "isValid", "isInvalid", "lang", "as"]);
  var _useContext = (0, import_react6.useContext)(FormContext_default), controlId = _useContext.controlId, custom = _useContext.custom;
  var type = "file";
  var _ref2 = custom ? [bsCustomPrefix, "custom-file-input"] : [bsPrefix, "form-control-file"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  return import_react6.default.createElement(Component, _extends({}, props, {
    ref,
    id: id || controlId,
    type,
    lang,
    className: (0, import_classnames5.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid")
  }));
});
FormFileInput.displayName = "FormFileInput";
var FormFileInput_default = FormFileInput;

// node_modules/react-bootstrap/esm/FormFileLabel.js
var import_classnames6 = __toESM(require_classnames());
var import_react7 = __toESM(require_react());
var FormFileLabel = import_react7.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, htmlFor = _ref.htmlFor, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "bsCustomPrefix", "className", "htmlFor"]);
  var _useContext = (0, import_react7.useContext)(FormContext_default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, "custom-file-label"] : [bsPrefix, "form-file-label"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  return import_react7.default.createElement("label", _extends({}, props, {
    ref,
    htmlFor: htmlFor || controlId,
    className: (0, import_classnames6.default)(className, bsPrefix),
    "data-browse": props["data-browse"]
  }));
});
FormFileLabel.displayName = "FormFileLabel";
var FormFileLabel_default = FormFileLabel;

// node_modules/react-bootstrap/esm/FormFile.js
var FormFile = import_react8.default.forwardRef(function(_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, _ref$feedbackTooltip = _ref.feedbackTooltip, feedbackTooltip = _ref$feedbackTooltip === void 0 ? false : _ref$feedbackTooltip, feedback = _ref.feedback, className = _ref.className, style = _ref.style, label = _ref.label, children = _ref.children, custom = _ref.custom, lang = _ref.lang, dataBrowse = _ref["data-browse"], _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, _ref$inputAs = _ref.inputAs, inputAs = _ref$inputAs === void 0 ? "input" : _ref$inputAs, props = _objectWithoutPropertiesLoose(_ref, ["id", "bsPrefix", "bsCustomPrefix", "disabled", "isValid", "isInvalid", "feedbackTooltip", "feedback", "className", "style", "label", "children", "custom", "lang", "data-browse", "as", "inputAs"]);
  var _ref2 = custom ? [bsCustomPrefix, "custom"] : [bsPrefix, "form-file"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  var type = "file";
  var _useContext = (0, import_react8.useContext)(FormContext_default), controlId = _useContext.controlId;
  var innerFormContext = (0, import_react8.useMemo)(function() {
    return {
      controlId: id || controlId,
      custom
    };
  }, [controlId, custom, id]);
  var hasLabel = label != null && label !== false && !children;
  var input = import_react8.default.createElement(FormFileInput_default, _extends({}, props, {
    ref,
    isValid,
    isInvalid,
    disabled,
    as: inputAs,
    lang
  }));
  return import_react8.default.createElement(FormContext_default.Provider, {
    value: innerFormContext
  }, import_react8.default.createElement(Component, {
    style,
    className: (0, import_classnames7.default)(className, bsPrefix, custom && "custom-" + type)
  }, children || import_react8.default.createElement(import_react8.default.Fragment, null, custom ? import_react8.default.createElement(import_react8.default.Fragment, null, input, hasLabel && import_react8.default.createElement(FormFileLabel_default, {
    "data-browse": dataBrowse
  }, label)) : import_react8.default.createElement(import_react8.default.Fragment, null, hasLabel && import_react8.default.createElement(FormFileLabel_default, null, label), input), (isValid || isInvalid) && import_react8.default.createElement(Feedback_default, {
    type: isValid ? "valid" : "invalid",
    tooltip: feedbackTooltip
  }, feedback))));
});
FormFile.displayName = "FormFile";
FormFile.Input = FormFileInput_default;
FormFile.Label = FormFileLabel_default;
var FormFile_default = FormFile;

// node_modules/react-bootstrap/esm/FormControl.js
var import_classnames8 = __toESM(require_classnames());
var import_all3 = __toESM(require_all());
var import_react9 = __toESM(require_react());
var import_warning = __toESM(require_warning());
var FormControl = import_react9.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, type = _ref.type, size = _ref.size, htmlSize = _ref.htmlSize, id = _ref.id, className = _ref.className, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, plaintext = _ref.plaintext, readOnly = _ref.readOnly, custom = _ref.custom, _ref$as = _ref.as, Component = _ref$as === void 0 ? "input" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "bsCustomPrefix", "type", "size", "htmlSize", "id", "className", "isValid", "isInvalid", "plaintext", "readOnly", "custom", "as"]);
  var _useContext = (0, import_react9.useContext)(FormContext_default), controlId = _useContext.controlId;
  var _ref2 = custom ? [bsCustomPrefix, "custom"] : [bsPrefix, "form-control"], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  var classes;
  if (plaintext) {
    var _classes;
    classes = (_classes = {}, _classes[bsPrefix + "-plaintext"] = true, _classes);
  } else if (type === "file") {
    var _classes2;
    classes = (_classes2 = {}, _classes2[bsPrefix + "-file"] = true, _classes2);
  } else if (type === "range") {
    var _classes3;
    classes = (_classes3 = {}, _classes3[bsPrefix + "-range"] = true, _classes3);
  } else if (Component === "select" && custom) {
    var _classes4;
    classes = (_classes4 = {}, _classes4[bsPrefix + "-select"] = true, _classes4[bsPrefix + "-select-" + size] = size, _classes4);
  } else {
    var _classes5;
    classes = (_classes5 = {}, _classes5[bsPrefix] = true, _classes5[bsPrefix + "-" + size] = size, _classes5);
  }
  true ? (0, import_warning.default)(controlId == null || !id, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
  return import_react9.default.createElement(Component, _extends({}, props, {
    type,
    size: htmlSize,
    ref,
    readOnly,
    id: id || controlId,
    className: (0, import_classnames8.default)(className, classes, isValid && "is-valid", isInvalid && "is-invalid")
  }));
});
FormControl.displayName = "FormControl";
var FormControl_default = Object.assign(FormControl, {
  Feedback: Feedback_default
});

// node_modules/react-bootstrap/esm/FormGroup.js
var import_classnames9 = __toESM(require_classnames());
var import_react10 = __toESM(require_react());
var FormGroup = import_react10.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, controlId = _ref.controlId, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "controlId", "as"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-group");
  var context = (0, import_react10.useMemo)(function() {
    return {
      controlId
    };
  }, [controlId]);
  return import_react10.default.createElement(FormContext_default.Provider, {
    value: context
  }, import_react10.default.createElement(Component, _extends({}, props, {
    ref,
    className: (0, import_classnames9.default)(className, bsPrefix)
  }), children));
});
FormGroup.displayName = "FormGroup";
var FormGroup_default = FormGroup;

// node_modules/react-bootstrap/esm/FormLabel.js
var import_classnames11 = __toESM(require_classnames());
var import_react12 = __toESM(require_react());
var import_warning2 = __toESM(require_warning());

// node_modules/react-bootstrap/esm/Col.js
var import_classnames10 = __toESM(require_classnames());
var import_react11 = __toESM(require_react());
var DEVICE_SIZES = ["xl", "lg", "md", "sm", "xs"];
var Col = import_react11.default.forwardRef(
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "as"]);
    var prefix = useBootstrapPrefix(bsPrefix, "col");
    var spans = [];
    var classes = [];
    DEVICE_SIZES.forEach(function(brkPoint) {
      var propValue = props[brkPoint];
      delete props[brkPoint];
      var span;
      var offset;
      var order;
      if (typeof propValue === "object" && propValue != null) {
        var _propValue$span = propValue.span;
        span = _propValue$span === void 0 ? true : _propValue$span;
        offset = propValue.offset;
        order = propValue.order;
      } else {
        span = propValue;
      }
      var infix = brkPoint !== "xs" ? "-" + brkPoint : "";
      if (span)
        spans.push(span === true ? "" + prefix + infix : "" + prefix + infix + "-" + span);
      if (order != null)
        classes.push("order" + infix + "-" + order);
      if (offset != null)
        classes.push("offset" + infix + "-" + offset);
    });
    if (!spans.length) {
      spans.push(prefix);
    }
    return import_react11.default.createElement(Component, _extends({}, props, {
      ref,
      className: import_classnames10.default.apply(void 0, [className].concat(spans, classes))
    }));
  }
);
Col.displayName = "Col";
var Col_default = Col;

// node_modules/react-bootstrap/esm/FormLabel.js
var defaultProps = {
  column: false,
  srOnly: false
};
var FormLabel = import_react12.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "label" : _ref$as, bsPrefix = _ref.bsPrefix, column = _ref.column, srOnly = _ref.srOnly, className = _ref.className, htmlFor = _ref.htmlFor, props = _objectWithoutPropertiesLoose(_ref, ["as", "bsPrefix", "column", "srOnly", "className", "htmlFor"]);
  var _useContext = (0, import_react12.useContext)(FormContext_default), controlId = _useContext.controlId;
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-label");
  var columnClass = "col-form-label";
  if (typeof column === "string")
    columnClass = columnClass + " " + columnClass + "-" + column;
  var classes = (0, import_classnames11.default)(className, bsPrefix, srOnly && "sr-only", column && columnClass);
  true ? (0, import_warning2.default)(controlId == null || !htmlFor, "`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.") : void 0;
  htmlFor = htmlFor || controlId;
  if (column)
    return import_react12.default.createElement(Col_default, _extends({
      as: "label",
      className: classes,
      htmlFor
    }, props));
  return (
    // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
    import_react12.default.createElement(Component, _extends({
      ref,
      className: classes,
      htmlFor
    }, props))
  );
});
FormLabel.displayName = "FormLabel";
FormLabel.defaultProps = defaultProps;
var FormLabel_default = FormLabel;

// node_modules/react-bootstrap/esm/FormText.js
var import_classnames12 = __toESM(require_classnames());
var import_react13 = __toESM(require_react());
var FormText = import_react13.default.forwardRef(
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "small" : _ref$as, muted = _ref.muted, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "as", "muted"]);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-text");
    return import_react13.default.createElement(Component, _extends({}, props, {
      ref,
      className: (0, import_classnames12.default)(className, bsPrefix, muted && "text-muted")
    }));
  }
);
FormText.displayName = "FormText";
var FormText_default = FormText;

// node_modules/react-bootstrap/esm/Switch.js
var import_react14 = __toESM(require_react());
var Switch = import_react14.default.forwardRef(function(props, ref) {
  return import_react14.default.createElement(FormCheck_default, _extends({}, props, {
    ref,
    type: "switch"
  }));
});
Switch.displayName = "Switch";
Switch.Input = FormCheck_default.Input;
Switch.Label = FormCheck_default.Label;
var Switch_default = Switch;

// node_modules/react-bootstrap/esm/Form.js
var FormRow = createWithBsPrefix("form-row");
var defaultProps2 = {
  inline: false
};
var FormImpl = import_react15.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, inline = _ref.inline, className = _ref.className, validated = _ref.validated, _ref$as = _ref.as, Component = _ref$as === void 0 ? "form" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "inline", "className", "validated", "as"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form");
  return import_react15.default.createElement(Component, _extends({}, props, {
    ref,
    className: (0, import_classnames13.default)(className, validated && "was-validated", inline && bsPrefix + "-inline")
  }));
});
FormImpl.displayName = "Form";
FormImpl.defaultProps = defaultProps2;
FormImpl.Row = FormRow;
FormImpl.Group = FormGroup_default;
FormImpl.Control = FormControl_default;
FormImpl.Check = FormCheck_default;
FormImpl.File = FormFile_default;
FormImpl.Switch = Switch_default;
FormImpl.Label = FormLabel_default;
FormImpl.Text = FormText_default;
var Form_default = FormImpl;

export {
  Col_default,
  FormCheck_default,
  FormFile_default,
  FormControl_default,
  FormGroup_default,
  FormLabel_default,
  FormText_default,
  Form_default
};
//# sourceMappingURL=chunk-GPR6F3ZM.js.map

import {
  NavContext_default,
  NavLink_default,
  qsa,
  useMergedRefs_default
} from "./chunk-FB4GAGNE.js";
import {
  NavbarContext_default,
  SelectableContext_default,
  makeEventKey,
  useUncontrolled
} from "./chunk-ZMWUNPV4.js";
import {
  require_all
} from "./chunk-BAEC7GPM.js";
import {
  CardContext_default
} from "./chunk-U5FT4UXY.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  require_classnames,
  useBootstrapPrefix
} from "./chunk-TBBU4YOC.js";
import {
  require_react
} from "./chunk-YNCU75EO.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/react-bootstrap/esm/Nav.js
var import_classnames2 = __toESM(require_classnames());
var import_all = __toESM(require_all());
var import_react5 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AbstractNav.js
var import_react3 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useForceUpdate.js
var import_react = __toESM(require_react());
function useForceUpdate() {
  var _useReducer = (0, import_react.useReducer)(function(state) {
    return !state;
  }, false), dispatch = _useReducer[1];
  return dispatch;
}

// node_modules/react-bootstrap/esm/TabContext.js
var import_react2 = __toESM(require_react());
var TabContext = import_react2.default.createContext(null);
var TabContext_default = TabContext;

// node_modules/react-bootstrap/esm/AbstractNav.js
var noop = function noop2() {
};
var AbstractNav = import_react3.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "ul" : _ref$as, onSelect = _ref.onSelect, activeKey = _ref.activeKey, role = _ref.role, onKeyDown = _ref.onKeyDown, props = _objectWithoutPropertiesLoose(_ref, ["as", "onSelect", "activeKey", "role", "onKeyDown"]);
  var forceUpdate = useForceUpdate();
  var needsRefocusRef = (0, import_react3.useRef)(false);
  var parentOnSelect = (0, import_react3.useContext)(SelectableContext_default);
  var tabContext = (0, import_react3.useContext)(TabContext_default);
  var getControlledId, getControllerId;
  if (tabContext) {
    role = role || "tablist";
    activeKey = tabContext.activeKey;
    getControlledId = tabContext.getControlledId;
    getControllerId = tabContext.getControllerId;
  }
  var listNode = (0, import_react3.useRef)(null);
  var getNextActiveChild = function getNextActiveChild2(offset) {
    var currentListNode = listNode.current;
    if (!currentListNode)
      return null;
    var items = qsa(currentListNode, "[data-rb-event-key]:not(.disabled)");
    var activeChild = currentListNode.querySelector(".active");
    if (!activeChild)
      return null;
    var index = items.indexOf(activeChild);
    if (index === -1)
      return null;
    var nextIndex = index + offset;
    if (nextIndex >= items.length)
      nextIndex = 0;
    if (nextIndex < 0)
      nextIndex = items.length - 1;
    return items[nextIndex];
  };
  var handleSelect = function handleSelect2(key, event) {
    if (key == null)
      return;
    if (onSelect)
      onSelect(key, event);
    if (parentOnSelect)
      parentOnSelect(key, event);
  };
  var handleKeyDown = function handleKeyDown2(event) {
    if (onKeyDown)
      onKeyDown(event);
    var nextActiveChild;
    switch (event.key) {
      case "ArrowLeft":
      case "ArrowUp":
        nextActiveChild = getNextActiveChild(-1);
        break;
      case "ArrowRight":
      case "ArrowDown":
        nextActiveChild = getNextActiveChild(1);
        break;
      default:
        return;
    }
    if (!nextActiveChild)
      return;
    event.preventDefault();
    handleSelect(nextActiveChild.dataset.rbEventKey, event);
    needsRefocusRef.current = true;
    forceUpdate();
  };
  (0, import_react3.useEffect)(function() {
    if (listNode.current && needsRefocusRef.current) {
      var activeChild = listNode.current.querySelector("[data-rb-event-key].active");
      if (activeChild)
        activeChild.focus();
    }
    needsRefocusRef.current = false;
  });
  var mergedRef = useMergedRefs_default(ref, listNode);
  return import_react3.default.createElement(SelectableContext_default.Provider, {
    value: handleSelect
  }, import_react3.default.createElement(NavContext_default.Provider, {
    value: {
      role,
      // used by NavLink to determine it's role
      activeKey: makeEventKey(activeKey),
      getControlledId: getControlledId || noop,
      getControllerId: getControllerId || noop
    }
  }, import_react3.default.createElement(Component, _extends({}, props, {
    onKeyDown: handleKeyDown,
    ref: mergedRef,
    role
  }))));
});
var AbstractNav_default = AbstractNav;

// node_modules/react-bootstrap/esm/NavItem.js
var import_classnames = __toESM(require_classnames());
var import_react4 = __toESM(require_react());
var NavItem = import_react4.default.forwardRef(
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "as"]);
    bsPrefix = useBootstrapPrefix(bsPrefix, "nav-item");
    return import_react4.default.createElement(Component, _extends({}, props, {
      ref,
      className: (0, import_classnames.default)(className, bsPrefix)
    }), children);
  }
);
NavItem.displayName = "NavItem";
var NavItem_default = NavItem;

// node_modules/react-bootstrap/esm/Nav.js
var defaultProps = {
  justify: false,
  fill: false
};
var Nav = import_react5.default.forwardRef(function(uncontrolledProps, ref) {
  var _classNames;
  var _useUncontrolled = useUncontrolled(uncontrolledProps, {
    activeKey: "onSelect"
  }), _useUncontrolled$as = _useUncontrolled.as, as = _useUncontrolled$as === void 0 ? "div" : _useUncontrolled$as, initialBsPrefix = _useUncontrolled.bsPrefix, variant = _useUncontrolled.variant, fill = _useUncontrolled.fill, justify = _useUncontrolled.justify, navbar = _useUncontrolled.navbar, className = _useUncontrolled.className, children = _useUncontrolled.children, activeKey = _useUncontrolled.activeKey, props = _objectWithoutPropertiesLoose(_useUncontrolled, ["as", "bsPrefix", "variant", "fill", "justify", "navbar", "className", "children", "activeKey"]);
  var bsPrefix = useBootstrapPrefix(initialBsPrefix, "nav");
  var navbarBsPrefix;
  var cardHeaderBsPrefix;
  var isNavbar = false;
  var navbarContext = (0, import_react5.useContext)(NavbarContext_default);
  var cardContext = (0, import_react5.useContext)(CardContext_default);
  if (navbarContext) {
    navbarBsPrefix = navbarContext.bsPrefix;
    isNavbar = navbar == null ? true : navbar;
  } else if (cardContext) {
    cardHeaderBsPrefix = cardContext.cardHeaderBsPrefix;
  }
  return import_react5.default.createElement(AbstractNav_default, _extends({
    as,
    ref,
    activeKey,
    className: (0, import_classnames2.default)(className, (_classNames = {}, _classNames[bsPrefix] = !isNavbar, _classNames[navbarBsPrefix + "-nav"] = isNavbar, _classNames[cardHeaderBsPrefix + "-" + variant] = !!cardHeaderBsPrefix, _classNames[bsPrefix + "-" + variant] = !!variant, _classNames[bsPrefix + "-fill"] = fill, _classNames[bsPrefix + "-justified"] = justify, _classNames))
  }, props), children);
});
Nav.displayName = "Nav";
Nav.defaultProps = defaultProps;
Nav.Item = NavItem_default;
Nav.Link = NavLink_default;
var Nav_default = Nav;

export {
  TabContext_default,
  AbstractNav_default,
  NavItem_default,
  Nav_default
};
//# sourceMappingURL=chunk-LVXGLH7U.js.map

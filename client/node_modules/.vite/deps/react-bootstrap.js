import {
  Container_default
} from "./chunk-FTTSVG2G.js";
import {
  AbstractNav_default,
  NavItem_default,
  Nav_default,
  TabContext_default
} from "./chunk-LVXGLH7U.js";
import {
  Collapse_default,
  ENTERED,
  ENTERING,
  NavbarBrand_default,
  Navbar_default,
  Transition_default,
  css_default,
  transitionEnd,
  transitionEndListener,
  triggerBrowserReflow
} from "./chunk-CNLV4ORE.js";
import {
  DropdownMenu_default,
  DropdownToggle_default,
  Dropdown_default,
  NavDropdown_default,
  alignPropType,
  contains,
  hasClass,
  mergeOptionsWithPopperConfig,
  placements,
  require_isRequiredForA11y,
  safeFindDOMNode,
  useCallbackRef,
  useEventCallback as useEventCallback2,
  useMounted,
  usePopperMarginModifiers,
  usePopper_default,
  usePrevious,
  useRootClose_default
} from "./chunk-S3MJH4BZ.js";
import {
  AbstractNavItem_default,
  NavLink_default,
  qsa
} from "./chunk-FB4GAGNE.js";
import {
  addEventListener_default,
  canUseDOM_default,
  listen_default,
  ownerDocument,
  removeEventListener_default
} from "./chunk-RAOVWLAA.js";
import {
  SelectableContext_default,
  _inheritsLoose,
  makeEventKey,
  require_browser,
  useCommittedRef_default,
  useEventCallback,
  useUncontrolled,
  useUncontrolledProp
} from "./chunk-ZMWUNPV4.js";
import {
  Col_default,
  FormCheck_default,
  FormControl_default,
  FormFile_default,
  FormGroup_default,
  FormLabel_default,
  FormText_default,
  Form_default
} from "./chunk-GPR6F3ZM.js";
import "./chunk-BAEC7GPM.js";
import {
  require_warning
} from "./chunk-HF4IY3LX.js";
import {
  require_prop_types
} from "./chunk-XSPH2NME.js";
import {
  Button_default
} from "./chunk-M5IB4S5Q.js";
import {
  SafeAnchor_default
} from "./chunk-HH5TEXI7.js";
import {
  createChainedFunction_default
} from "./chunk-PKCUGAUQ.js";
import {
  CardImg_default,
  Card_default,
  divWithClassName_default
} from "./chunk-JDE7ZSJG.js";
import "./chunk-U5FT4UXY.js";
import {
  createWithBsPrefix
} from "./chunk-XIHBJ5VB.js";
import {
  ThemeProvider_default,
  _extends,
  _objectWithoutPropertiesLoose,
  require_classnames,
  useBootstrapPrefix
} from "./chunk-TBBU4YOC.js";
import {
  require_react_dom
} from "./chunk-ZXHYZKDV.js";
import {
  require_react
} from "./chunk-YNCU75EO.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/react-bootstrap/esm/Accordion.js
var import_classnames = __toESM(require_classnames());
var import_react4 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AccordionToggle.js
var import_react2 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AccordionContext.js
var import_react = __toESM(require_react());
var context = import_react.default.createContext(null);
context.displayName = "AccordionContext";
var AccordionContext_default = context;

// node_modules/react-bootstrap/esm/AccordionToggle.js
function useAccordionToggle(eventKey, onClick) {
  var contextEventKey = (0, import_react2.useContext)(AccordionContext_default);
  var onSelect = (0, import_react2.useContext)(SelectableContext_default);
  return function(e) {
    var eventKeyPassed = eventKey === contextEventKey ? null : eventKey;
    if (onSelect)
      onSelect(eventKeyPassed, e);
    if (onClick)
      onClick(e);
  };
}
var AccordionToggle = import_react2.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "button" : _ref$as, children = _ref.children, eventKey = _ref.eventKey, onClick = _ref.onClick, props = _objectWithoutPropertiesLoose(_ref, ["as", "children", "eventKey", "onClick"]);
  var accordionOnClick = useAccordionToggle(eventKey, onClick);
  if (Component === "button") {
    props.type = "button";
  }
  return import_react2.default.createElement(Component, _extends({
    ref,
    onClick: accordionOnClick
  }, props), children);
});
var AccordionToggle_default = AccordionToggle;

// node_modules/react-bootstrap/esm/AccordionCollapse.js
var import_react3 = __toESM(require_react());
var AccordionCollapse = import_react3.default.forwardRef(function(_ref, ref) {
  var children = _ref.children, eventKey = _ref.eventKey, props = _objectWithoutPropertiesLoose(_ref, ["children", "eventKey"]);
  var contextEventKey = (0, import_react3.useContext)(AccordionContext_default);
  return import_react3.default.createElement(SelectableContext_default.Provider, {
    value: null
  }, import_react3.default.createElement(Collapse_default, _extends({
    ref,
    in: contextEventKey === eventKey
  }, props), import_react3.default.createElement("div", null, import_react3.default.Children.only(children))));
});
AccordionCollapse.displayName = "AccordionCollapse";
var AccordionCollapse_default = AccordionCollapse;

// node_modules/react-bootstrap/esm/Accordion.js
var Accordion = import_react4.default.forwardRef(function(props, ref) {
  var _useUncontrolled = useUncontrolled(props, {
    activeKey: "onSelect"
  }), _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? "div" : _useUncontrolled$as, activeKey = _useUncontrolled.activeKey, bsPrefix = _useUncontrolled.bsPrefix, children = _useUncontrolled.children, className = _useUncontrolled.className, onSelect = _useUncontrolled.onSelect, controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, ["as", "activeKey", "bsPrefix", "children", "className", "onSelect"]);
  var finalClassName = (0, import_classnames.default)(className, useBootstrapPrefix(bsPrefix, "accordion"));
  return import_react4.default.createElement(AccordionContext_default.Provider, {
    value: activeKey || null
  }, import_react4.default.createElement(SelectableContext_default.Provider, {
    value: onSelect || null
  }, import_react4.default.createElement(Component, _extends({
    ref
  }, controlledProps, {
    className: finalClassName
  }), children)));
});
Accordion.displayName = "Accordion";
Accordion.Toggle = AccordionToggle_default;
Accordion.Collapse = AccordionCollapse_default;
var Accordion_default = Accordion;

// node_modules/react-bootstrap/esm/Alert.js
var import_classnames4 = __toESM(require_classnames());
var import_react7 = __toESM(require_react());

// node_modules/react-bootstrap/esm/Fade.js
var import_classnames2 = __toESM(require_classnames());
var import_react5 = __toESM(require_react());
var _fadeStyles;
var defaultProps = {
  in: false,
  timeout: 300,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false
};
var fadeStyles = (_fadeStyles = {}, _fadeStyles[ENTERING] = "show", _fadeStyles[ENTERED] = "show", _fadeStyles);
var Fade = import_react5.default.forwardRef(function(_ref, ref) {
  var className = _ref.className, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);
  var handleEnter = (0, import_react5.useCallback)(function(node) {
    triggerBrowserReflow(node);
    if (props.onEnter)
      props.onEnter(node);
  }, [props]);
  return import_react5.default.createElement(Transition_default, _extends({
    ref,
    addEndListener: transitionEndListener
  }, props, {
    onEnter: handleEnter
  }), function(status, innerProps) {
    return import_react5.default.cloneElement(children, _extends({}, innerProps, {
      className: (0, import_classnames2.default)("fade", className, children.props.className, fadeStyles[status])
    }));
  });
});
Fade.defaultProps = defaultProps;
Fade.displayName = "Fade";
var Fade_default = Fade;

// node_modules/react-bootstrap/esm/CloseButton.js
var import_prop_types = __toESM(require_prop_types());
var import_react6 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
var propTypes = {
  label: import_prop_types.default.string.isRequired,
  onClick: import_prop_types.default.func
};
var defaultProps2 = {
  label: "Close"
};
var CloseButton = import_react6.default.forwardRef(function(_ref, ref) {
  var label = _ref.label, onClick = _ref.onClick, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["label", "onClick", "className"]);
  return import_react6.default.createElement("button", _extends({
    ref,
    type: "button",
    className: (0, import_classnames3.default)("close", className),
    onClick
  }, props), import_react6.default.createElement("span", {
    "aria-hidden": "true"
  }, "Ã—"), import_react6.default.createElement("span", {
    className: "sr-only"
  }, label));
});
CloseButton.displayName = "CloseButton";
CloseButton.propTypes = propTypes;
CloseButton.defaultProps = defaultProps2;
var CloseButton_default = CloseButton;

// node_modules/react-bootstrap/esm/Alert.js
var DivStyledAsH4 = divWithClassName_default("h4");
DivStyledAsH4.displayName = "DivStyledAsH4";
var AlertHeading = createWithBsPrefix("alert-heading", {
  Component: DivStyledAsH4
});
var AlertLink = createWithBsPrefix("alert-link", {
  Component: SafeAnchor_default
});
var defaultProps3 = {
  show: true,
  transition: Fade_default,
  closeLabel: "Close alert"
};
var Alert = import_react7.default.forwardRef(function(uncontrolledProps, ref) {
  var _useUncontrolled = useUncontrolled(uncontrolledProps, {
    show: "onClose"
  }), bsPrefix = _useUncontrolled.bsPrefix, show = _useUncontrolled.show, closeLabel = _useUncontrolled.closeLabel, className = _useUncontrolled.className, children = _useUncontrolled.children, variant = _useUncontrolled.variant, onClose2 = _useUncontrolled.onClose, dismissible = _useUncontrolled.dismissible, transition = _useUncontrolled.transition, props = _objectWithoutPropertiesLoose(_useUncontrolled, ["bsPrefix", "show", "closeLabel", "className", "children", "variant", "onClose", "dismissible", "transition"]);
  var prefix = useBootstrapPrefix(bsPrefix, "alert");
  var handleClose = useEventCallback(function(e) {
    if (onClose2) {
      onClose2(false, e);
    }
  });
  var Transition = transition === true ? Fade_default : transition;
  var alert = import_react7.default.createElement("div", _extends({
    role: "alert"
  }, !Transition ? props : void 0, {
    ref,
    className: (0, import_classnames4.default)(className, prefix, variant && prefix + "-" + variant, dismissible && prefix + "-dismissible")
  }), dismissible && import_react7.default.createElement(CloseButton_default, {
    onClick: handleClose,
    label: closeLabel
  }), children);
  if (!Transition)
    return show ? alert : null;
  return import_react7.default.createElement(Transition, _extends({
    unmountOnExit: true
  }, props, {
    ref: void 0,
    in: show
  }), alert);
});
Alert.displayName = "Alert";
Alert.defaultProps = defaultProps3;
Alert.Link = AlertLink;
Alert.Heading = AlertHeading;
var Alert_default = Alert;

// node_modules/react-bootstrap/esm/Badge.js
var import_classnames5 = __toESM(require_classnames());
var import_react8 = __toESM(require_react());
var defaultProps4 = {
  pill: false
};
var Badge = import_react8.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, variant = _ref.variant, pill = _ref.pill, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "span" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "variant", "pill", "className", "as"]);
  var prefix = useBootstrapPrefix(bsPrefix, "badge");
  return import_react8.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames5.default)(className, prefix, pill && prefix + "-pill", variant && prefix + "-" + variant)
  }));
});
Badge.displayName = "Badge";
Badge.defaultProps = defaultProps4;
var Badge_default = Badge;

// node_modules/react-bootstrap/esm/Breadcrumb.js
var import_classnames7 = __toESM(require_classnames());
var import_react10 = __toESM(require_react());

// node_modules/react-bootstrap/esm/BreadcrumbItem.js
var import_classnames6 = __toESM(require_classnames());
var import_react9 = __toESM(require_react());
var defaultProps5 = {
  active: false,
  linkProps: {}
};
var BreadcrumbItem = import_react9.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, active = _ref.active, children = _ref.children, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "li" : _ref$as, _ref$linkAs = _ref.linkAs, LinkComponent = _ref$linkAs === void 0 ? SafeAnchor_default : _ref$linkAs, linkProps = _ref.linkProps, href = _ref.href, title = _ref.title, target = _ref.target, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "active", "children", "className", "as", "linkAs", "linkProps", "href", "title", "target"]);
  var prefix = useBootstrapPrefix(bsPrefix, "breadcrumb-item");
  return import_react9.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames6.default)(prefix, className, {
      active
    }),
    "aria-current": active ? "page" : void 0
  }), active ? children : import_react9.default.createElement(LinkComponent, _extends({}, linkProps, {
    href,
    title,
    target
  }), children));
});
BreadcrumbItem.displayName = "BreadcrumbItem";
BreadcrumbItem.defaultProps = defaultProps5;
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/react-bootstrap/esm/Breadcrumb.js
var defaultProps6 = {
  label: "breadcrumb",
  listProps: {}
};
var Breadcrumb = import_react10.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, listProps = _ref.listProps, children = _ref.children, label = _ref.label, _ref$as = _ref.as, Component = _ref$as === void 0 ? "nav" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "listProps", "children", "label", "as"]);
  var prefix = useBootstrapPrefix(bsPrefix, "breadcrumb");
  return import_react10.default.createElement(Component, _extends({
    "aria-label": label,
    className,
    ref
  }, props), import_react10.default.createElement("ol", _extends({}, listProps, {
    className: (0, import_classnames7.default)(prefix, listProps == null ? void 0 : listProps.className)
  }), children));
});
Breadcrumb.displayName = "Breadcrumb";
Breadcrumb.defaultProps = defaultProps6;
Breadcrumb.Item = BreadcrumbItem_default;
var Breadcrumb_default = Breadcrumb;

// node_modules/react-bootstrap/esm/ButtonGroup.js
var import_classnames8 = __toESM(require_classnames());
var import_react11 = __toESM(require_react());
var defaultProps7 = {
  vertical: false,
  toggle: false,
  role: "group"
};
var ButtonGroup = import_react11.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, size2 = _ref.size, toggle = _ref.toggle, vertical = _ref.vertical, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, rest = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "size", "toggle", "vertical", "className", "as"]);
  var prefix = useBootstrapPrefix(bsPrefix, "btn-group");
  var baseClass = prefix;
  if (vertical)
    baseClass = prefix + "-vertical";
  return import_react11.default.createElement(Component, _extends({}, rest, {
    ref,
    className: (0, import_classnames8.default)(className, baseClass, size2 && prefix + "-" + size2, toggle && prefix + "-toggle")
  }));
});
ButtonGroup.displayName = "ButtonGroup";
ButtonGroup.defaultProps = defaultProps7;
var ButtonGroup_default = ButtonGroup;

// node_modules/react-bootstrap/esm/ButtonToolbar.js
var import_classnames9 = __toESM(require_classnames());
var import_react12 = __toESM(require_react());
var defaultProps8 = {
  role: "toolbar"
};
var ButtonToolbar = import_react12.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className"]);
  var prefix = useBootstrapPrefix(bsPrefix, "btn-toolbar");
  return import_react12.default.createElement("div", _extends({}, props, {
    ref,
    className: (0, import_classnames9.default)(className, prefix)
  }));
});
ButtonToolbar.displayName = "ButtonToolbar";
ButtonToolbar.defaultProps = defaultProps8;
var ButtonToolbar_default = ButtonToolbar;

// node_modules/react-bootstrap/esm/CardColumns.js
var CardColumns_default = createWithBsPrefix("card-columns");

// node_modules/react-bootstrap/esm/CardDeck.js
var CardDeck_default = createWithBsPrefix("card-deck");

// node_modules/react-bootstrap/esm/CardGroup.js
var CardGroup_default = createWithBsPrefix("card-group");

// node_modules/@restart/hooks/esm/useUpdateEffect.js
var import_react13 = __toESM(require_react());
function useUpdateEffect(fn, deps) {
  var isFirst = (0, import_react13.useRef)(true);
  (0, import_react13.useEffect)(function() {
    if (isFirst.current) {
      isFirst.current = false;
      return;
    }
    return fn();
  }, deps);
}
var useUpdateEffect_default = useUpdateEffect;

// node_modules/@restart/hooks/esm/useTimeout.js
var import_react17 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMounted.js
var import_react14 = __toESM(require_react());
function useMounted2() {
  var mounted = (0, import_react14.useRef)(true);
  var isMounted = (0, import_react14.useRef)(function() {
    return mounted.current;
  });
  (0, import_react14.useEffect)(function() {
    return function() {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}

// node_modules/@restart/hooks/esm/useUpdatedRef.js
var import_react15 = __toESM(require_react());
function useUpdatedRef(value) {
  var valueRef = (0, import_react15.useRef)(value);
  valueRef.current = value;
  return valueRef;
}

// node_modules/@restart/hooks/esm/useWillUnmount.js
var import_react16 = __toESM(require_react());
function useWillUnmount(fn) {
  var onUnmount = useUpdatedRef(fn);
  (0, import_react16.useEffect)(function() {
    return function() {
      return onUnmount.current();
    };
  }, []);
}

// node_modules/@restart/hooks/esm/useTimeout.js
var MAX_DELAY_MS = Math.pow(2, 31) - 1;
function setChainedTimeout(handleRef, fn, timeoutAtMs) {
  var delayMs = timeoutAtMs - Date.now();
  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function() {
    return setChainedTimeout(handleRef, fn, timeoutAtMs);
  }, MAX_DELAY_MS);
}
function useTimeout() {
  var isMounted = useMounted2();
  var handleRef = (0, import_react17.useRef)();
  useWillUnmount(function() {
    return clearTimeout(handleRef.current);
  });
  return (0, import_react17.useMemo)(function() {
    var clear = function clear2() {
      return clearTimeout(handleRef.current);
    };
    function set(fn, delayMs) {
      if (delayMs === void 0) {
        delayMs = 0;
      }
      if (!isMounted())
        return;
      clear();
      if (delayMs <= MAX_DELAY_MS) {
        handleRef.current = setTimeout(fn, delayMs);
      } else {
        setChainedTimeout(handleRef, fn, Date.now() + delayMs);
      }
    }
    return {
      set,
      clear
    };
  }, []);
}

// node_modules/react-bootstrap/esm/Carousel.js
var import_classnames11 = __toESM(require_classnames());
var import_prop_types2 = __toESM(require_prop_types());
var import_react20 = __toESM(require_react());

// node_modules/react-bootstrap/esm/CarouselCaption.js
var CarouselCaption_default = createWithBsPrefix("carousel-caption");

// node_modules/react-bootstrap/esm/CarouselItem.js
var import_classnames10 = __toESM(require_classnames());
var import_react18 = __toESM(require_react());
var CarouselItem = import_react18.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, bsPrefix = _ref.bsPrefix, children = _ref.children, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["as", "bsPrefix", "children", "className"]);
  var finalClassName = (0, import_classnames10.default)(className, useBootstrapPrefix(bsPrefix, "carousel-item"));
  return import_react18.default.createElement(Component, _extends({
    ref
  }, props, {
    className: finalClassName
  }), children);
});
CarouselItem.displayName = "CarouselItem";
var CarouselItem_default = CarouselItem;

// node_modules/react-bootstrap/esm/ElementChildren.js
var import_react19 = __toESM(require_react());
function map(children, func) {
  var index = 0;
  return import_react19.default.Children.map(children, function(child) {
    return import_react19.default.isValidElement(child) ? func(child, index++) : child;
  });
}
function forEach(children, func) {
  var index = 0;
  import_react19.default.Children.forEach(children, function(child) {
    if (import_react19.default.isValidElement(child))
      func(child, index++);
  });
}

// node_modules/react-bootstrap/esm/Carousel.js
var SWIPE_THRESHOLD = 40;
var propTypes2 = {
  /**
   * @default 'carousel'
   */
  bsPrefix: import_prop_types2.default.string,
  as: import_prop_types2.default.elementType,
  /**
   * Enables animation on the Carousel as it transitions between slides.
   */
  slide: import_prop_types2.default.bool,
  /** Animates slides with a crossfade animation instead of the default slide animation */
  fade: import_prop_types2.default.bool,
  /**
   * Show the Carousel previous and next arrows for changing the current slide
   */
  controls: import_prop_types2.default.bool,
  /**
   * Show a set of slide position indicators
   */
  indicators: import_prop_types2.default.bool,
  /**
   * Controls the current visible slide
   *
   * @controllable onSelect
   */
  activeIndex: import_prop_types2.default.number,
  /**
   * Callback fired when the active item changes.
   *
   * ```js
   * (eventKey: number, event: Object | null) => void
   * ```
   *
   * @controllable activeIndex
   */
  onSelect: import_prop_types2.default.func,
  /**
   * Callback fired when a slide transition starts.
   *
   * ```js
   * (eventKey: number, direction: 'left' | 'right') => void
   */
  onSlide: import_prop_types2.default.func,
  /**
   * Callback fired when a slide transition ends.
   *
   * ```js
   * (eventKey: number, direction: 'left' | 'right') => void
   */
  onSlid: import_prop_types2.default.func,
  /**
   * The amount of time to delay between automatically cycling an item. If `null`, carousel will not automatically cycle.
   */
  interval: import_prop_types2.default.number,
  /** Whether the carousel should react to keyboard events. */
  keyboard: import_prop_types2.default.bool,
  /**
   * If set to `"hover"`, pauses the cycling of the carousel on `mouseenter` and resumes the cycling of the carousel on `mouseleave`. If set to `false`, hovering over the carousel won't pause it.
   *
   * On touch-enabled devices, when set to `"hover"`, cycling will pause on `touchend` (once the user finished interacting with the carousel) for two intervals, before automatically resuming. Note that this is in addition to the above mouse behavior.
   */
  pause: import_prop_types2.default.oneOf(["hover", false]),
  /** Whether the carousel should cycle continuously or have hard stops. */
  wrap: import_prop_types2.default.bool,
  /**
   * Whether the carousel should support left/right swipe interactions on touchscreen devices.
   */
  touch: import_prop_types2.default.bool,
  /** Override the default button icon for the "previous" control */
  prevIcon: import_prop_types2.default.node,
  /**
   * Label shown to screen readers only, can be used to show the previous element
   * in the carousel.
   * Set to null to deactivate.
   */
  prevLabel: import_prop_types2.default.string,
  /** Override the default button icon for the "next" control */
  nextIcon: import_prop_types2.default.node,
  /**
   * Label shown to screen readers only, can be used to show the next element
   * in the carousel.
   * Set to null to deactivate.
   */
  nextLabel: import_prop_types2.default.string
};
var defaultProps9 = {
  slide: true,
  fade: false,
  controls: true,
  indicators: true,
  defaultActiveIndex: 0,
  interval: 5e3,
  keyboard: true,
  pause: "hover",
  wrap: true,
  touch: true,
  prevIcon: import_react20.default.createElement("span", {
    "aria-hidden": "true",
    className: "carousel-control-prev-icon"
  }),
  prevLabel: "Previous",
  nextIcon: import_react20.default.createElement("span", {
    "aria-hidden": "true",
    className: "carousel-control-next-icon"
  }),
  nextLabel: "Next"
};
function isVisible(element) {
  if (!element || !element.style || !element.parentNode || !element.parentNode.style) {
    return false;
  }
  var elementStyle = getComputedStyle(element);
  return elementStyle.display !== "none" && elementStyle.visibility !== "hidden" && getComputedStyle(element.parentNode).display !== "none";
}
function CarouselFunc(uncontrolledProps, ref) {
  var _useUncontrolled = useUncontrolled(uncontrolledProps, {
    activeIndex: "onSelect"
  }), _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? "div" : _useUncontrolled$as, bsPrefix = _useUncontrolled.bsPrefix, slide = _useUncontrolled.slide, fade = _useUncontrolled.fade, controls = _useUncontrolled.controls, indicators = _useUncontrolled.indicators, activeIndex = _useUncontrolled.activeIndex, onSelect = _useUncontrolled.onSelect, onSlide = _useUncontrolled.onSlide, onSlid = _useUncontrolled.onSlid, interval = _useUncontrolled.interval, keyboard = _useUncontrolled.keyboard, onKeyDown = _useUncontrolled.onKeyDown, pause = _useUncontrolled.pause, onMouseOver = _useUncontrolled.onMouseOver, onMouseOut = _useUncontrolled.onMouseOut, wrap = _useUncontrolled.wrap, touch = _useUncontrolled.touch, onTouchStart = _useUncontrolled.onTouchStart, onTouchMove = _useUncontrolled.onTouchMove, onTouchEnd = _useUncontrolled.onTouchEnd, prevIcon = _useUncontrolled.prevIcon, prevLabel = _useUncontrolled.prevLabel, nextIcon = _useUncontrolled.nextIcon, nextLabel = _useUncontrolled.nextLabel, className = _useUncontrolled.className, children = _useUncontrolled.children, props = _objectWithoutPropertiesLoose(_useUncontrolled, ["as", "bsPrefix", "slide", "fade", "controls", "indicators", "activeIndex", "onSelect", "onSlide", "onSlid", "interval", "keyboard", "onKeyDown", "pause", "onMouseOver", "onMouseOut", "wrap", "touch", "onTouchStart", "onTouchMove", "onTouchEnd", "prevIcon", "prevLabel", "nextIcon", "nextLabel", "className", "children"]);
  var prefix = useBootstrapPrefix(bsPrefix, "carousel");
  var nextDirectionRef = (0, import_react20.useRef)(null);
  var _useState = (0, import_react20.useState)("next"), direction = _useState[0], setDirection = _useState[1];
  var _useState2 = (0, import_react20.useState)(false), paused = _useState2[0], setPaused = _useState2[1];
  var _useState3 = (0, import_react20.useState)(false), isSliding = _useState3[0], setIsSliding = _useState3[1];
  var _useState4 = (0, import_react20.useState)(activeIndex || 0), renderedActiveIndex = _useState4[0], setRenderedActiveIndex = _useState4[1];
  if (!isSliding && activeIndex !== renderedActiveIndex) {
    if (nextDirectionRef.current) {
      setDirection(nextDirectionRef.current);
    } else {
      setDirection((activeIndex || 0) > renderedActiveIndex ? "next" : "prev");
    }
    if (slide) {
      setIsSliding(true);
    }
    setRenderedActiveIndex(activeIndex || 0);
  }
  (0, import_react20.useEffect)(function() {
    if (nextDirectionRef.current) {
      nextDirectionRef.current = null;
    }
  });
  var numChildren = 0;
  var activeChildInterval;
  forEach(children, function(child, index) {
    ++numChildren;
    if (index === activeIndex) {
      activeChildInterval = child.props.interval;
    }
  });
  var activeChildIntervalRef = useCommittedRef_default(activeChildInterval);
  var prev = (0, import_react20.useCallback)(function(event) {
    if (isSliding) {
      return;
    }
    var nextActiveIndex = renderedActiveIndex - 1;
    if (nextActiveIndex < 0) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = numChildren - 1;
    }
    nextDirectionRef.current = "prev";
    if (onSelect) {
      onSelect(nextActiveIndex, event);
    }
  }, [isSliding, renderedActiveIndex, onSelect, wrap, numChildren]);
  var next = useEventCallback(function(event) {
    if (isSliding) {
      return;
    }
    var nextActiveIndex = renderedActiveIndex + 1;
    if (nextActiveIndex >= numChildren) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = 0;
    }
    nextDirectionRef.current = "next";
    if (onSelect) {
      onSelect(nextActiveIndex, event);
    }
  });
  var elementRef = (0, import_react20.useRef)();
  (0, import_react20.useImperativeHandle)(ref, function() {
    return {
      element: elementRef.current,
      prev,
      next
    };
  });
  var nextWhenVisible = useEventCallback(function() {
    if (!document.hidden && isVisible(elementRef.current)) {
      next();
    }
  });
  var slideDirection = direction === "next" ? "left" : "right";
  useUpdateEffect_default(function() {
    if (slide) {
      return;
    }
    if (onSlide) {
      onSlide(renderedActiveIndex, slideDirection);
    }
    if (onSlid) {
      onSlid(renderedActiveIndex, slideDirection);
    }
  }, [renderedActiveIndex]);
  var orderClassName = prefix + "-item-" + direction;
  var directionalClassName = prefix + "-item-" + slideDirection;
  var handleEnter = (0, import_react20.useCallback)(function(node) {
    triggerBrowserReflow(node);
    if (onSlide) {
      onSlide(renderedActiveIndex, slideDirection);
    }
  }, [onSlide, renderedActiveIndex, slideDirection]);
  var handleEntered = (0, import_react20.useCallback)(function() {
    setIsSliding(false);
    if (onSlid) {
      onSlid(renderedActiveIndex, slideDirection);
    }
  }, [onSlid, renderedActiveIndex, slideDirection]);
  var handleKeyDown = (0, import_react20.useCallback)(function(event) {
    if (keyboard && !/input|textarea/i.test(event.target.tagName)) {
      switch (event.key) {
        case "ArrowLeft":
          event.preventDefault();
          prev(event);
          return;
        case "ArrowRight":
          event.preventDefault();
          next(event);
          return;
        default:
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [keyboard, onKeyDown, prev, next]);
  var handleMouseOver = (0, import_react20.useCallback)(function(event) {
    if (pause === "hover") {
      setPaused(true);
    }
    if (onMouseOver) {
      onMouseOver(event);
    }
  }, [pause, onMouseOver]);
  var handleMouseOut = (0, import_react20.useCallback)(function(event) {
    setPaused(false);
    if (onMouseOut) {
      onMouseOut(event);
    }
  }, [onMouseOut]);
  var touchStartXRef = (0, import_react20.useRef)(0);
  var touchDeltaXRef = (0, import_react20.useRef)(0);
  var touchUnpauseTimeout = useTimeout();
  var handleTouchStart = (0, import_react20.useCallback)(function(event) {
    touchStartXRef.current = event.touches[0].clientX;
    touchDeltaXRef.current = 0;
    if (pause === "hover") {
      setPaused(true);
    }
    if (onTouchStart) {
      onTouchStart(event);
    }
  }, [pause, onTouchStart]);
  var handleTouchMove = (0, import_react20.useCallback)(function(event) {
    if (event.touches && event.touches.length > 1) {
      touchDeltaXRef.current = 0;
    } else {
      touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;
    }
    if (onTouchMove) {
      onTouchMove(event);
    }
  }, [onTouchMove]);
  var handleTouchEnd = (0, import_react20.useCallback)(function(event) {
    if (touch) {
      var touchDeltaX = touchDeltaXRef.current;
      if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {
        if (touchDeltaX > 0) {
          prev(event);
        } else {
          next(event);
        }
      }
    }
    if (pause === "hover") {
      touchUnpauseTimeout.set(function() {
        setPaused(false);
      }, interval || void 0);
    }
    if (onTouchEnd) {
      onTouchEnd(event);
    }
  }, [touch, pause, prev, next, touchUnpauseTimeout, interval, onTouchEnd]);
  var shouldPlay = interval != null && !paused && !isSliding;
  var intervalHandleRef = (0, import_react20.useRef)();
  (0, import_react20.useEffect)(function() {
    var _ref, _activeChildIntervalR;
    if (!shouldPlay) {
      return void 0;
    }
    intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : next, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : void 0);
    return function() {
      if (intervalHandleRef.current !== null) {
        clearInterval(intervalHandleRef.current);
      }
    };
  }, [shouldPlay, next, activeChildIntervalRef, interval, nextWhenVisible]);
  var indicatorOnClicks = (0, import_react20.useMemo)(function() {
    return indicators && Array.from({
      length: numChildren
    }, function(_, index) {
      return function(event) {
        if (onSelect) {
          onSelect(index, event);
        }
      };
    });
  }, [indicators, numChildren, onSelect]);
  return import_react20.default.createElement(Component, _extends({
    ref: elementRef
  }, props, {
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd,
    className: (0, import_classnames11.default)(className, prefix, slide && "slide", fade && prefix + "-fade")
  }), indicators && import_react20.default.createElement("ol", {
    className: prefix + "-indicators"
  }, map(children, function(_child, index) {
    return import_react20.default.createElement("li", {
      key: index,
      className: index === renderedActiveIndex ? "active" : void 0,
      onClick: indicatorOnClicks ? indicatorOnClicks[index] : void 0
    });
  })), import_react20.default.createElement("div", {
    className: prefix + "-inner"
  }, map(children, function(child, index) {
    var isActive = index === renderedActiveIndex;
    return slide ? import_react20.default.createElement(Transition_default, {
      in: isActive,
      onEnter: isActive ? handleEnter : void 0,
      onEntered: isActive ? handleEntered : void 0,
      addEndListener: transitionEndListener
    }, function(status) {
      return import_react20.default.cloneElement(child, {
        className: (0, import_classnames11.default)(child.props.className, isActive && status !== "entered" && orderClassName, (status === "entered" || status === "exiting") && "active", (status === "entering" || status === "exiting") && directionalClassName)
      });
    }) : import_react20.default.cloneElement(child, {
      className: (0, import_classnames11.default)(child.props.className, isActive && "active")
    });
  })), controls && import_react20.default.createElement(import_react20.default.Fragment, null, (wrap || activeIndex !== 0) && import_react20.default.createElement(SafeAnchor_default, {
    className: prefix + "-control-prev",
    onClick: prev
  }, prevIcon, prevLabel && import_react20.default.createElement("span", {
    className: "sr-only"
  }, prevLabel)), (wrap || activeIndex !== numChildren - 1) && import_react20.default.createElement(SafeAnchor_default, {
    className: prefix + "-control-next",
    onClick: next
  }, nextIcon, nextLabel && import_react20.default.createElement("span", {
    className: "sr-only"
  }, nextLabel))));
}
var Carousel = import_react20.default.forwardRef(CarouselFunc);
Carousel.displayName = "Carousel";
Carousel.propTypes = propTypes2;
Carousel.defaultProps = defaultProps9;
Carousel.Caption = CarouselCaption_default;
Carousel.Item = CarouselItem_default;
var Carousel_default = Carousel;

// node_modules/react-bootstrap/esm/DropdownButton.js
var import_react21 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var propTypes3 = {
  /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string|number}
   * @required
   */
  id: import_prop_types3.default.any,
  /** An `href` passed to the Toggle component */
  href: import_prop_types3.default.string,
  /** An `onClick` handler passed to the Toggle component */
  onClick: import_prop_types3.default.func,
  /** The content of the non-toggle Button.  */
  title: import_prop_types3.default.node.isRequired,
  /** Disables both Buttons  */
  disabled: import_prop_types3.default.bool,
  /**
   * Aligns the dropdown menu responsively.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"left"|"right"|{ sm: "left"|"right" }|{ md: "left"|"right" }|{ lg: "left"|"right" }|{ xl: "left"|"right"} }
   */
  menuAlign: alignPropType,
  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
  menuRole: import_prop_types3.default.string,
  /** Whether to render the dropdown menu in the DOM before the first time it is shown */
  renderMenuOnMount: import_prop_types3.default.bool,
  /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */
  rootCloseEvent: import_prop_types3.default.string,
  /** @ignore */
  bsPrefix: import_prop_types3.default.string,
  /** @ignore */
  variant: import_prop_types3.default.string,
  /** @ignore */
  size: import_prop_types3.default.string
};
var DropdownButton = import_react21.default.forwardRef(function(_ref, ref) {
  var title = _ref.title, children = _ref.children, bsPrefix = _ref.bsPrefix, rootCloseEvent = _ref.rootCloseEvent, variant = _ref.variant, size2 = _ref.size, menuAlign = _ref.menuAlign, menuRole = _ref.menuRole, renderMenuOnMount = _ref.renderMenuOnMount, disabled = _ref.disabled, href = _ref.href, id = _ref.id, props = _objectWithoutPropertiesLoose(_ref, ["title", "children", "bsPrefix", "rootCloseEvent", "variant", "size", "menuAlign", "menuRole", "renderMenuOnMount", "disabled", "href", "id"]);
  return import_react21.default.createElement(Dropdown_default, _extends({
    ref
  }, props), import_react21.default.createElement(DropdownToggle_default, {
    id,
    href,
    size: size2,
    variant,
    disabled,
    childBsPrefix: bsPrefix
  }, title), import_react21.default.createElement(DropdownMenu_default, {
    align: menuAlign,
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent
  }, children));
});
DropdownButton.displayName = "DropdownButton";
DropdownButton.propTypes = propTypes3;
var DropdownButton_default = DropdownButton;

// node_modules/react-bootstrap/esm/Image.js
var import_classnames12 = __toESM(require_classnames());
var import_react22 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var propTypes4 = {
  /**
   * @default 'img'
   */
  bsPrefix: import_prop_types4.default.string,
  /**
   * Sets image as fluid image.
   */
  fluid: import_prop_types4.default.bool,
  /**
   * Sets image shape as rounded.
   */
  rounded: import_prop_types4.default.bool,
  /**
   * Sets image shape as circle.
   */
  roundedCircle: import_prop_types4.default.bool,
  /**
   * Sets image shape as thumbnail.
   */
  thumbnail: import_prop_types4.default.bool
};
var defaultProps10 = {
  fluid: false,
  rounded: false,
  roundedCircle: false,
  thumbnail: false
};
var Image = import_react22.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, fluid = _ref.fluid, rounded = _ref.rounded, roundedCircle = _ref.roundedCircle, thumbnail = _ref.thumbnail, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "fluid", "rounded", "roundedCircle", "thumbnail"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "img");
  var classes = (0, import_classnames12.default)(fluid && bsPrefix + "-fluid", rounded && "rounded", roundedCircle && "rounded-circle", thumbnail && bsPrefix + "-thumbnail");
  return import_react22.default.createElement("img", _extends({
    // eslint-disable-line jsx-a11y/alt-text
    ref
  }, props, {
    className: (0, import_classnames12.default)(className, classes)
  }));
});
Image.displayName = "Image";
Image.defaultProps = defaultProps10;
var Image_default = Image;

// node_modules/react-bootstrap/esm/FigureImage.js
var import_classnames13 = __toESM(require_classnames());
var import_react23 = __toESM(require_react());
var defaultProps11 = {
  fluid: true
};
var FigureImage = import_react23.default.forwardRef(function(_ref, ref) {
  var className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["className"]);
  return import_react23.default.createElement(Image_default, _extends({
    ref
  }, props, {
    className: (0, import_classnames13.default)(className, "figure-img")
  }));
});
FigureImage.displayName = "FigureImage";
FigureImage.propTypes = propTypes4;
FigureImage.defaultProps = defaultProps11;
var FigureImage_default = FigureImage;

// node_modules/react-bootstrap/esm/FigureCaption.js
var FigureCaption = createWithBsPrefix("figure-caption", {
  Component: "figcaption"
});
var FigureCaption_default = FigureCaption;

// node_modules/react-bootstrap/esm/Figure.js
var Figure = createWithBsPrefix("figure", {
  Component: "figure"
});
Figure.Image = FigureImage_default;
Figure.Caption = FigureCaption_default;
var Figure_default = Figure;

// node_modules/react-bootstrap/esm/InputGroup.js
var import_classnames14 = __toESM(require_classnames());
var import_react24 = __toESM(require_react());
var InputGroupAppend = createWithBsPrefix("input-group-append");
var InputGroupPrepend = createWithBsPrefix("input-group-prepend");
var InputGroupText = createWithBsPrefix("input-group-text", {
  Component: "span"
});
var InputGroupCheckbox = function InputGroupCheckbox2(props) {
  return import_react24.default.createElement(InputGroupText, null, import_react24.default.createElement("input", _extends({
    type: "checkbox"
  }, props)));
};
var InputGroupRadio = function InputGroupRadio2(props) {
  return import_react24.default.createElement(InputGroupText, null, import_react24.default.createElement("input", _extends({
    type: "radio"
  }, props)));
};
var InputGroup = import_react24.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, size2 = _ref.size, hasValidation = _ref.hasValidation, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "size", "hasValidation", "className", "as"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "input-group");
  return import_react24.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames14.default)(className, bsPrefix, size2 && bsPrefix + "-" + size2, hasValidation && "has-validation")
  }));
});
InputGroup.displayName = "InputGroup";
var InputGroupWithExtras = _extends({}, InputGroup, {
  Text: InputGroupText,
  Radio: InputGroupRadio,
  Checkbox: InputGroupCheckbox,
  Append: InputGroupAppend,
  Prepend: InputGroupPrepend
});
var InputGroup_default = InputGroupWithExtras;

// node_modules/react-bootstrap/esm/Jumbotron.js
var import_react25 = __toESM(require_react());
var import_classnames15 = __toESM(require_classnames());
var defaultProps12 = {
  fluid: false
};
var Jumbotron = import_react25.default.forwardRef(function(_ref, ref) {
  var _classes;
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, className = _ref.className, fluid = _ref.fluid, bsPrefix = _ref.bsPrefix, props = _objectWithoutPropertiesLoose(_ref, ["as", "className", "fluid", "bsPrefix"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "jumbotron");
  var classes = (_classes = {}, _classes[bsPrefix] = true, _classes[bsPrefix + "-fluid"] = fluid, _classes);
  return import_react25.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames15.default)(className, classes)
  }));
});
Jumbotron.defaultProps = defaultProps12;
Jumbotron.displayName = "Jumbotron";
var Jumbotron_default = Jumbotron;

// node_modules/react-bootstrap/esm/ListGroup.js
var import_classnames17 = __toESM(require_classnames());
var import_react27 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/react-bootstrap/esm/ListGroupItem.js
var import_classnames16 = __toESM(require_classnames());
var import_react26 = __toESM(require_react());
var defaultProps13 = {
  variant: void 0,
  active: false,
  disabled: false
};
var ListGroupItem = import_react26.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, active = _ref.active, disabled = _ref.disabled, className = _ref.className, variant = _ref.variant, action = _ref.action, as = _ref.as, eventKey = _ref.eventKey, onClick = _ref.onClick, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "active", "disabled", "className", "variant", "action", "as", "eventKey", "onClick"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "list-group-item");
  var handleClick = (0, import_react26.useCallback)(function(event) {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    if (onClick)
      onClick(event);
  }, [disabled, onClick]);
  if (disabled && props.tabIndex === void 0) {
    props.tabIndex = -1;
    props["aria-disabled"] = true;
  }
  return import_react26.default.createElement(AbstractNavItem_default, _extends({
    ref
  }, props, {
    // TODO: Restrict eventKey to string in v5?
    eventKey: makeEventKey(eventKey, props.href),
    as: as || (action ? props.href ? "a" : "button" : "div"),
    onClick: handleClick,
    className: (0, import_classnames16.default)(className, bsPrefix, active && "active", disabled && "disabled", variant && bsPrefix + "-" + variant, action && bsPrefix + "-action")
  }));
});
ListGroupItem.defaultProps = defaultProps13;
ListGroupItem.displayName = "ListGroupItem";
var ListGroupItem_default = ListGroupItem;

// node_modules/react-bootstrap/esm/ListGroup.js
var defaultProps14 = {
  variant: void 0,
  horizontal: void 0
};
var ListGroup = import_react27.default.forwardRef(function(props, ref) {
  var _useUncontrolled = useUncontrolled(props, {
    activeKey: "onSelect"
  }), className = _useUncontrolled.className, initialBsPrefix = _useUncontrolled.bsPrefix, variant = _useUncontrolled.variant, horizontal = _useUncontrolled.horizontal, _useUncontrolled$as = _useUncontrolled.as, as = _useUncontrolled$as === void 0 ? "div" : _useUncontrolled$as, controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, ["className", "bsPrefix", "variant", "horizontal", "as"]);
  var bsPrefix = useBootstrapPrefix(initialBsPrefix, "list-group");
  var horizontalVariant;
  if (horizontal) {
    horizontalVariant = horizontal === true ? "horizontal" : "horizontal-" + horizontal;
  } else {
    horizontalVariant = null;
  }
  true ? (0, import_warning.default)(!(horizontal && variant === "flush"), '`variant="flush"` and `horizontal` should not be used together.') : void 0;
  return import_react27.default.createElement(AbstractNav_default, _extends({
    ref
  }, controlledProps, {
    as,
    className: (0, import_classnames17.default)(className, bsPrefix, variant && bsPrefix + "-" + variant, horizontalVariant && bsPrefix + "-" + horizontalVariant)
  }));
});
ListGroup.defaultProps = defaultProps14;
ListGroup.displayName = "ListGroup";
ListGroup.Item = ListGroupItem_default;
var ListGroup_default = ListGroup;

// node_modules/react-bootstrap/esm/Media.js
var import_classnames18 = __toESM(require_classnames());
var import_react28 = __toESM(require_react());
var MediaBody = createWithBsPrefix("media-body");
var Media = import_react28.default.forwardRef(
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "as"]);
    var prefix = useBootstrapPrefix(bsPrefix, "media");
    return import_react28.default.createElement(Component, _extends({}, props, {
      ref,
      className: (0, import_classnames18.default)(className, prefix)
    }));
  }
);
Media.displayName = "Media";
Media.Body = MediaBody;
var Media_default = Media;

// node_modules/react-bootstrap/esm/Modal.js
var import_classnames21 = __toESM(require_classnames());

// node_modules/dom-helpers/esm/scrollbarSize.js
var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM_default) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      scrollDiv.style.width = "50px";
      scrollDiv.style.height = "50px";
      scrollDiv.style.overflow = "scroll";
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}

// node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react29 = __toESM(require_react());
function useCallbackRef2() {
  return (0, import_react29.useState)(null);
}

// node_modules/react-bootstrap/esm/Modal.js
var import_react37 = __toESM(require_react());

// node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName)
      return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}

// node_modules/react-overlays/esm/Modal.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react33 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-overlays/node_modules/@restart/hooks/esm/useUpdatedRef.js
var import_react30 = __toESM(require_react());
function useUpdatedRef2(value) {
  const valueRef = (0, import_react30.useRef)(value);
  valueRef.current = value;
  return valueRef;
}

// node_modules/react-overlays/node_modules/@restart/hooks/esm/useWillUnmount.js
var import_react31 = __toESM(require_react());
function useWillUnmount2(fn) {
  const onUnmount = useUpdatedRef2(fn);
  (0, import_react31.useEffect)(() => () => onUnmount.current(), []);
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/dom-helpers/esm/isDocument.js
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}

// node_modules/dom-helpers/esm/isWindow.js
function isWindow(node) {
  if ("window" in node && node.window === node)
    return node;
  if (isDocument(node))
    return node.defaultView || false;
  return false;
}

// node_modules/react-overlays/esm/isOverflowing.js
function isBody(node) {
  return node && node.tagName.toLowerCase() === "body";
}
function bodyIsOverflowing(node) {
  var doc = isWindow(node) ? ownerDocument() : ownerDocument(node);
  var win = isWindow(node) || doc.defaultView;
  return doc.body.clientWidth < win.innerWidth;
}
function isOverflowing(container) {
  var win = isWindow(container);
  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
}

// node_modules/react-overlays/esm/manageAriaHidden.js
var BLACKLIST = ["template", "script", "style"];
var isHidable = function isHidable2(_ref) {
  var nodeType = _ref.nodeType, tagName = _ref.tagName;
  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
};
var siblings = function siblings2(container, exclude, cb) {
  [].forEach.call(container.children, function(node) {
    if (exclude.indexOf(node) === -1 && isHidable(node)) {
      cb(node);
    }
  });
};
function ariaHidden(hide, node) {
  if (!node)
    return;
  if (hide) {
    node.setAttribute("aria-hidden", "true");
  } else {
    node.removeAttribute("aria-hidden");
  }
}
function hideSiblings(container, _ref2) {
  var dialog = _ref2.dialog, backdrop = _ref2.backdrop;
  siblings(container, [dialog, backdrop], function(node) {
    return ariaHidden(true, node);
  });
}
function showSiblings(container, _ref3) {
  var dialog = _ref3.dialog, backdrop = _ref3.backdrop;
  siblings(container, [dialog, backdrop], function(node) {
    return ariaHidden(false, node);
  });
}

// node_modules/react-overlays/esm/ModalManager.js
function findIndexOf(arr, cb) {
  var idx = -1;
  arr.some(function(d, i) {
    if (cb(d, i)) {
      idx = i;
      return true;
    }
    return false;
  });
  return idx;
}
var ModalManager = function() {
  function ModalManager2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$hideSiblingNodes = _ref.hideSiblingNodes, hideSiblingNodes = _ref$hideSiblingNodes === void 0 ? true : _ref$hideSiblingNodes, _ref$handleContainerO = _ref.handleContainerOverflow, handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO;
    this.hideSiblingNodes = void 0;
    this.handleContainerOverflow = void 0;
    this.modals = void 0;
    this.containers = void 0;
    this.data = void 0;
    this.scrollbarSize = void 0;
    this.hideSiblingNodes = hideSiblingNodes;
    this.handleContainerOverflow = handleContainerOverflow;
    this.modals = [];
    this.containers = [];
    this.data = [];
    this.scrollbarSize = scrollbarSize();
  }
  var _proto = ModalManager2.prototype;
  _proto.isContainerOverflowing = function isContainerOverflowing(modal) {
    var data = this.data[this.containerIndexFromModal(modal)];
    return data && data.overflowing;
  };
  _proto.containerIndexFromModal = function containerIndexFromModal(modal) {
    return findIndexOf(this.data, function(d) {
      return d.modals.indexOf(modal) !== -1;
    });
  };
  _proto.setContainerStyle = function setContainerStyle(containerState, container) {
    var style = {
      overflow: "hidden"
    };
    containerState.style = {
      overflow: container.style.overflow,
      paddingRight: container.style.paddingRight
    };
    if (containerState.overflowing) {
      style.paddingRight = parseInt(css_default(container, "paddingRight") || "0", 10) + this.scrollbarSize + "px";
    }
    css_default(container, style);
  };
  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {
    Object.assign(container.style, containerState.style);
  };
  _proto.add = function add(modal, container, className) {
    var modalIdx = this.modals.indexOf(modal);
    var containerIdx = this.containers.indexOf(container);
    if (modalIdx !== -1) {
      return modalIdx;
    }
    modalIdx = this.modals.length;
    this.modals.push(modal);
    if (this.hideSiblingNodes) {
      hideSiblings(container, modal);
    }
    if (containerIdx !== -1) {
      this.data[containerIdx].modals.push(modal);
      return modalIdx;
    }
    var data = {
      modals: [modal],
      // right now only the first modal of a container will have its classes applied
      classes: className ? className.split(/\s+/) : [],
      overflowing: isOverflowing(container)
    };
    if (this.handleContainerOverflow) {
      this.setContainerStyle(data, container);
    }
    data.classes.forEach(addClass.bind(null, container));
    this.containers.push(container);
    this.data.push(data);
    return modalIdx;
  };
  _proto.remove = function remove(modal) {
    var modalIdx = this.modals.indexOf(modal);
    if (modalIdx === -1) {
      return;
    }
    var containerIdx = this.containerIndexFromModal(modal);
    var data = this.data[containerIdx];
    var container = this.containers[containerIdx];
    data.modals.splice(data.modals.indexOf(modal), 1);
    this.modals.splice(modalIdx, 1);
    if (data.modals.length === 0) {
      data.classes.forEach(removeClass.bind(null, container));
      if (this.handleContainerOverflow) {
        this.removeContainerStyle(data, container);
      }
      if (this.hideSiblingNodes) {
        showSiblings(container, modal);
      }
      this.containers.splice(containerIdx, 1);
      this.data.splice(containerIdx, 1);
    } else if (this.hideSiblingNodes) {
      var _data$modals = data.modals[data.modals.length - 1], backdrop = _data$modals.backdrop, dialog = _data$modals.dialog;
      ariaHidden(false, dialog);
      ariaHidden(false, backdrop);
    }
  };
  _proto.isTopModal = function isTopModal(modal) {
    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
  };
  return ModalManager2;
}();
var ModalManager_default = ModalManager;

// node_modules/react-overlays/esm/useWaitForDOMRef.js
var import_react32 = __toESM(require_react());
var resolveContainerRef = function resolveContainerRef2(ref) {
  var _ref;
  if (typeof document === "undefined")
    return null;
  if (ref == null)
    return ownerDocument().body;
  if (typeof ref === "function")
    ref = ref();
  if (ref && "current" in ref)
    ref = ref.current;
  if ((_ref = ref) != null && _ref.nodeType)
    return ref || null;
  return null;
};
function useWaitForDOMRef(ref, onResolved) {
  var _useState = (0, import_react32.useState)(function() {
    return resolveContainerRef(ref);
  }), resolvedRef = _useState[0], setRef = _useState[1];
  if (!resolvedRef) {
    var earlyRef = resolveContainerRef(ref);
    if (earlyRef)
      setRef(earlyRef);
  }
  (0, import_react32.useEffect)(function() {
    if (onResolved && resolvedRef) {
      onResolved(resolvedRef);
    }
  }, [onResolved, resolvedRef]);
  (0, import_react32.useEffect)(function() {
    var nextRef = resolveContainerRef(ref);
    if (nextRef !== resolvedRef) {
      setRef(nextRef);
    }
  }, [ref, resolvedRef]);
  return resolvedRef;
}

// node_modules/react-overlays/esm/Modal.js
var manager;
function getManager() {
  if (!manager)
    manager = new ModalManager_default();
  return manager;
}
function useModalManager(provided) {
  var modalManager = provided || getManager();
  var modal = (0, import_react33.useRef)({
    dialog: null,
    backdrop: null
  });
  return Object.assign(modal.current, {
    add: function add(container, className) {
      return modalManager.add(modal.current, container, className);
    },
    remove: function remove() {
      return modalManager.remove(modal.current);
    },
    isTopModal: function isTopModal() {
      return modalManager.isTopModal(modal.current);
    },
    setDialogRef: (0, import_react33.useCallback)(function(ref) {
      modal.current.dialog = ref;
    }, []),
    setBackdropRef: (0, import_react33.useCallback)(function(ref) {
      modal.current.backdrop = ref;
    }, [])
  });
}
var Modal = (0, import_react33.forwardRef)(function(_ref, ref) {
  var _ref$show = _ref.show, show = _ref$show === void 0 ? false : _ref$show, _ref$role = _ref.role, role = _ref$role === void 0 ? "dialog" : _ref$role, className = _ref.className, style = _ref.style, children = _ref.children, _ref$backdrop = _ref.backdrop, backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop, _ref$keyboard = _ref.keyboard, keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard, onBackdropClick = _ref.onBackdropClick, onEscapeKeyDown = _ref.onEscapeKeyDown, transition = _ref.transition, backdropTransition = _ref.backdropTransition, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, _ref$enforceFocus = _ref.enforceFocus, enforceFocus = _ref$enforceFocus === void 0 ? true : _ref$enforceFocus, _ref$restoreFocus = _ref.restoreFocus, restoreFocus = _ref$restoreFocus === void 0 ? true : _ref$restoreFocus, restoreFocusOptions = _ref.restoreFocusOptions, renderDialog = _ref.renderDialog, _ref$renderBackdrop = _ref.renderBackdrop, renderBackdrop = _ref$renderBackdrop === void 0 ? function(props) {
    return import_react33.default.createElement("div", props);
  } : _ref$renderBackdrop, providedManager = _ref.manager, containerRef = _ref.container, containerClassName = _ref.containerClassName, onShow = _ref.onShow, _ref$onHide = _ref.onHide, onHide3 = _ref$onHide === void 0 ? function() {
  } : _ref$onHide, onExit = _ref.onExit, onExited = _ref.onExited, onExiting = _ref.onExiting, onEnter = _ref.onEnter, onEntering = _ref.onEntering, onEntered = _ref.onEntered, rest = _objectWithoutPropertiesLoose(_ref, ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "backdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "containerClassName", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"]);
  var container = useWaitForDOMRef(containerRef);
  var modal = useModalManager(providedManager);
  var isMounted = useMounted();
  var prevShow = usePrevious(show);
  var _useState = (0, import_react33.useState)(!show), exited = _useState[0], setExited = _useState[1];
  var lastFocusRef = (0, import_react33.useRef)(null);
  (0, import_react33.useImperativeHandle)(ref, function() {
    return modal;
  }, [modal]);
  if (canUseDOM_default && !prevShow && show) {
    lastFocusRef.current = activeElement();
  }
  if (!transition && !show && !exited) {
    setExited(true);
  } else if (show && exited) {
    setExited(false);
  }
  var handleShow = useEventCallback2(function() {
    modal.add(container, containerClassName);
    removeKeydownListenerRef.current = listen_default(document, "keydown", handleDocumentKeyDown);
    removeFocusListenerRef.current = listen_default(
      document,
      "focus",
      // the timeout is necessary b/c this will run before the new modal is mounted
      // and so steals focus from it
      function() {
        return setTimeout(handleEnforceFocus);
      },
      true
    );
    if (onShow) {
      onShow();
    }
    if (autoFocus) {
      var currentActiveElement = activeElement(document);
      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
        lastFocusRef.current = currentActiveElement;
        modal.dialog.focus();
      }
    }
  });
  var handleHide = useEventCallback2(function() {
    modal.remove();
    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();
    if (restoreFocus) {
      var _lastFocusRef$current;
      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
      lastFocusRef.current = null;
    }
  });
  (0, import_react33.useEffect)(function() {
    if (!show || !container)
      return;
    handleShow();
  }, [
    show,
    container,
    /* should never change: */
    handleShow
  ]);
  (0, import_react33.useEffect)(function() {
    if (!exited)
      return;
    handleHide();
  }, [exited, handleHide]);
  useWillUnmount2(function() {
    handleHide();
  });
  var handleEnforceFocus = useEventCallback2(function() {
    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
      return;
    }
    var currentActiveElement = activeElement();
    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
      modal.dialog.focus();
    }
  });
  var handleBackdropClick = useEventCallback2(function(e) {
    if (e.target !== e.currentTarget) {
      return;
    }
    onBackdropClick == null ? void 0 : onBackdropClick(e);
    if (backdrop === true) {
      onHide3();
    }
  });
  var handleDocumentKeyDown = useEventCallback2(function(e) {
    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);
      if (!e.defaultPrevented) {
        onHide3();
      }
    }
  });
  var removeFocusListenerRef = (0, import_react33.useRef)();
  var removeKeydownListenerRef = (0, import_react33.useRef)();
  var handleHidden = function handleHidden2() {
    setExited(true);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    onExited == null ? void 0 : onExited.apply(void 0, args);
  };
  var Transition = transition;
  if (!container || !(show || Transition && !exited)) {
    return null;
  }
  var dialogProps = _extends({
    role,
    ref: modal.setDialogRef,
    // apparently only works on the dialog role element
    "aria-modal": role === "dialog" ? true : void 0
  }, rest, {
    style,
    className,
    tabIndex: -1
  });
  var dialog = renderDialog ? renderDialog(dialogProps) : import_react33.default.createElement("div", dialogProps, import_react33.default.cloneElement(children, {
    role: "document"
  }));
  if (Transition) {
    dialog = import_react33.default.createElement(Transition, {
      appear: true,
      unmountOnExit: true,
      "in": !!show,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered
    }, dialog);
  }
  var backdropElement = null;
  if (backdrop) {
    var BackdropTransition2 = backdropTransition;
    backdropElement = renderBackdrop({
      ref: modal.setBackdropRef,
      onClick: handleBackdropClick
    });
    if (BackdropTransition2) {
      backdropElement = import_react33.default.createElement(BackdropTransition2, {
        appear: true,
        "in": !!show
      }, backdropElement);
    }
  }
  return import_react33.default.createElement(import_react33.default.Fragment, null, import_react_dom.default.createPortal(import_react33.default.createElement(import_react33.default.Fragment, null, backdropElement, dialog), container));
});
var propTypes5 = {
  /**
   * Set the visibility of the Modal
   */
  show: import_prop_types5.default.bool,
  /**
   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.
   *
   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
   * page content can be placed behind a virtual backdrop as well as a visual one.
   */
  container: import_prop_types5.default.any,
  /**
   * A callback fired when the Modal is opening.
   */
  onShow: import_prop_types5.default.func,
  /**
   * A callback fired when either the backdrop is clicked, or the escape key is pressed.
   *
   * The `onHide` callback only signals intent from the Modal,
   * you must actually set the `show` prop to `false` for the Modal to close.
   */
  onHide: import_prop_types5.default.func,
  /**
   * Include a backdrop component.
   */
  backdrop: import_prop_types5.default.oneOfType([import_prop_types5.default.bool, import_prop_types5.default.oneOf(["static"])]),
  /**
   * A function that returns the dialog component. Useful for custom
   * rendering. **Note:** the component should make sure to apply the provided ref.
   *
   * ```js static
   * renderDialog={props => <MyDialog {...props} />}
   * ```
   */
  renderDialog: import_prop_types5.default.func,
  /**
   * A function that returns a backdrop component. Useful for custom
   * backdrop rendering.
   *
   * ```js
   *  renderBackdrop={props => <MyBackdrop {...props} />}
   * ```
   */
  renderBackdrop: import_prop_types5.default.func,
  /**
   * A callback fired when the escape key, if specified in `keyboard`, is pressed.
   *
   * If preventDefault() is called on the keyboard event, closing the modal will be cancelled.
   */
  onEscapeKeyDown: import_prop_types5.default.func,
  /**
   * A callback fired when the backdrop, if specified, is clicked.
   */
  onBackdropClick: import_prop_types5.default.func,
  /**
   * A css class or set of classes applied to the modal container when the modal is open,
   * and removed when it is closed.
   */
  containerClassName: import_prop_types5.default.string,
  /**
   * Close the modal when escape key is pressed
   */
  keyboard: import_prop_types5.default.bool,
  /**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the dialog component.
   */
  transition: import_prop_types5.default.elementType,
  /**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the backdrop components.
   */
  backdropTransition: import_prop_types5.default.elementType,
  /**
   * When `true` The modal will automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes. This also
   * works correctly with any Modal children that have the `autoFocus` prop.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */
  autoFocus: import_prop_types5.default.bool,
  /**
   * When `true` The modal will prevent focus from leaving the Modal while open.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */
  enforceFocus: import_prop_types5.default.bool,
  /**
   * When `true` The modal will restore focus to previously focused element once
   * modal is hidden
   */
  restoreFocus: import_prop_types5.default.bool,
  /**
   * Options passed to focus function when `restoreFocus` is set to `true`
   *
   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters
   */
  restoreFocusOptions: import_prop_types5.default.shape({
    preventScroll: import_prop_types5.default.bool
  }),
  /**
   * Callback fired before the Modal transitions in
   */
  onEnter: import_prop_types5.default.func,
  /**
   * Callback fired as the Modal begins to transition in
   */
  onEntering: import_prop_types5.default.func,
  /**
   * Callback fired after the Modal finishes transitioning in
   */
  onEntered: import_prop_types5.default.func,
  /**
   * Callback fired right before the Modal transitions out
   */
  onExit: import_prop_types5.default.func,
  /**
   * Callback fired as the Modal begins to transition out
   */
  onExiting: import_prop_types5.default.func,
  /**
   * Callback fired after the Modal finishes transitioning out
   */
  onExited: import_prop_types5.default.func,
  /**
   * A ModalManager instance used to track and manage the state of open
   * Modals. Useful when customizing how modals interact within a container
   */
  manager: import_prop_types5.default.instanceOf(ModalManager_default)
};
Modal.displayName = "Modal";
Modal.propTypes = propTypes5;
var Modal_default = Object.assign(Modal, {
  Manager: ModalManager_default
});

// node_modules/react-bootstrap/esm/Modal.js
var import_warning2 = __toESM(require_warning());

// node_modules/react-bootstrap/esm/BootstrapModalManager.js
var Selector = {
  FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
  STICKY_CONTENT: ".sticky-top",
  NAVBAR_TOGGLER: ".navbar-toggler"
};
var BootstrapModalManager = function(_ModalManager) {
  _inheritsLoose(BootstrapModalManager2, _ModalManager);
  function BootstrapModalManager2() {
    return _ModalManager.apply(this, arguments) || this;
  }
  var _proto = BootstrapModalManager2.prototype;
  _proto.adjustAndStore = function adjustAndStore(prop, element, adjust) {
    var _css;
    var actual = element.style[prop];
    element.dataset[prop] = actual;
    css_default(element, (_css = {}, _css[prop] = parseFloat(css_default(element, prop)) + adjust + "px", _css));
  };
  _proto.restore = function restore(prop, element) {
    var value = element.dataset[prop];
    if (value !== void 0) {
      var _css2;
      delete element.dataset[prop];
      css_default(element, (_css2 = {}, _css2[prop] = value, _css2));
    }
  };
  _proto.setContainerStyle = function setContainerStyle(containerState, container) {
    var _this = this;
    _ModalManager.prototype.setContainerStyle.call(this, containerState, container);
    if (!containerState.overflowing)
      return;
    var size2 = scrollbarSize();
    qsa(container, Selector.FIXED_CONTENT).forEach(function(el) {
      return _this.adjustAndStore("paddingRight", el, size2);
    });
    qsa(container, Selector.STICKY_CONTENT).forEach(function(el) {
      return _this.adjustAndStore("marginRight", el, -size2);
    });
    qsa(container, Selector.NAVBAR_TOGGLER).forEach(function(el) {
      return _this.adjustAndStore("marginRight", el, size2);
    });
  };
  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {
    var _this2 = this;
    _ModalManager.prototype.removeContainerStyle.call(this, containerState, container);
    qsa(container, Selector.FIXED_CONTENT).forEach(function(el) {
      return _this2.restore("paddingRight", el);
    });
    qsa(container, Selector.STICKY_CONTENT).forEach(function(el) {
      return _this2.restore("marginRight", el);
    });
    qsa(container, Selector.NAVBAR_TOGGLER).forEach(function(el) {
      return _this2.restore("marginRight", el);
    });
  };
  return BootstrapModalManager2;
}(ModalManager_default);

// node_modules/react-bootstrap/esm/ModalBody.js
var ModalBody_default = createWithBsPrefix("modal-body");

// node_modules/react-bootstrap/esm/ModalContext.js
var import_react34 = __toESM(require_react());
var ModalContext = import_react34.default.createContext({
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onHide: function onHide() {
  }
});
var ModalContext_default = ModalContext;

// node_modules/react-bootstrap/esm/ModalDialog.js
var import_classnames19 = __toESM(require_classnames());
var import_react35 = __toESM(require_react());
var ModalDialog = import_react35.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, contentClassName = _ref.contentClassName, centered = _ref.centered, size2 = _ref.size, children = _ref.children, scrollable = _ref.scrollable, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "contentClassName", "centered", "size", "children", "scrollable"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal");
  var dialogClass = bsPrefix + "-dialog";
  return import_react35.default.createElement("div", _extends({}, props, {
    ref,
    className: (0, import_classnames19.default)(dialogClass, className, size2 && bsPrefix + "-" + size2, centered && dialogClass + "-centered", scrollable && dialogClass + "-scrollable")
  }), import_react35.default.createElement("div", {
    className: (0, import_classnames19.default)(bsPrefix + "-content", contentClassName)
  }, children));
});
ModalDialog.displayName = "ModalDialog";
var ModalDialog_default = ModalDialog;

// node_modules/react-bootstrap/esm/ModalFooter.js
var ModalFooter_default = createWithBsPrefix("modal-footer");

// node_modules/react-bootstrap/esm/ModalHeader.js
var import_classnames20 = __toESM(require_classnames());
var import_react36 = __toESM(require_react());
var defaultProps15 = {
  closeLabel: "Close",
  closeButton: false
};
var ModalHeader = import_react36.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, closeLabel = _ref.closeLabel, closeButton = _ref.closeButton, onHide3 = _ref.onHide, className = _ref.className, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "closeLabel", "closeButton", "onHide", "className", "children"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal-header");
  var context2 = (0, import_react36.useContext)(ModalContext_default);
  var handleClick = useEventCallback(function() {
    if (context2)
      context2.onHide();
    if (onHide3)
      onHide3();
  });
  return import_react36.default.createElement("div", _extends({
    ref
  }, props, {
    className: (0, import_classnames20.default)(className, bsPrefix)
  }), children, closeButton && import_react36.default.createElement(CloseButton_default, {
    label: closeLabel,
    onClick: handleClick
  }));
});
ModalHeader.displayName = "ModalHeader";
ModalHeader.defaultProps = defaultProps15;
var ModalHeader_default = ModalHeader;

// node_modules/react-bootstrap/esm/ModalTitle.js
var DivStyledAsH42 = divWithClassName_default("h4");
var ModalTitle_default = createWithBsPrefix("modal-title", {
  Component: DivStyledAsH42
});

// node_modules/react-bootstrap/esm/Modal.js
var manager2;
var defaultProps16 = {
  show: false,
  backdrop: true,
  keyboard: true,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  animation: true,
  dialogAs: ModalDialog_default
};
function DialogTransition(props) {
  return import_react37.default.createElement(Fade_default, props);
}
function BackdropTransition(props) {
  return import_react37.default.createElement(Fade_default, props);
}
var Modal2 = import_react37.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, style = _ref.style, dialogClassName = _ref.dialogClassName, contentClassName = _ref.contentClassName, children = _ref.children, Dialog = _ref.dialogAs, ariaLabelledby = _ref["aria-labelledby"], show = _ref.show, animation = _ref.animation, backdrop = _ref.backdrop, keyboard = _ref.keyboard, onEscapeKeyDown = _ref.onEscapeKeyDown, onShow = _ref.onShow, onHide3 = _ref.onHide, container = _ref.container, autoFocus = _ref.autoFocus, enforceFocus = _ref.enforceFocus, restoreFocus = _ref.restoreFocus, restoreFocusOptions = _ref.restoreFocusOptions, onEntered = _ref.onEntered, onExit = _ref.onExit, onExiting = _ref.onExiting, onEnter = _ref.onEnter, onEntering = _ref.onEntering, onExited = _ref.onExited, backdropClassName = _ref.backdropClassName, propsManager = _ref.manager, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "style", "dialogClassName", "contentClassName", "children", "dialogAs", "aria-labelledby", "show", "animation", "backdrop", "keyboard", "onEscapeKeyDown", "onShow", "onHide", "container", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "onEntered", "onExit", "onExiting", "onEnter", "onEntering", "onExited", "backdropClassName", "manager"]);
  var _useState = (0, import_react37.useState)({}), modalStyle = _useState[0], setStyle = _useState[1];
  var _useState2 = (0, import_react37.useState)(false), animateStaticModal = _useState2[0], setAnimateStaticModal = _useState2[1];
  var waitingForMouseUpRef = (0, import_react37.useRef)(false);
  var ignoreBackdropClickRef = (0, import_react37.useRef)(false);
  var removeStaticModalAnimationRef = (0, import_react37.useRef)(null);
  var _useCallbackRef = useCallbackRef2(), modal = _useCallbackRef[0], setModalRef = _useCallbackRef[1];
  var handleHide = useEventCallback(onHide3);
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal");
  (0, import_react37.useImperativeHandle)(ref, function() {
    return {
      get _modal() {
        true ? (0, import_warning2.default)(false, "Accessing `_modal` is not supported and will be removed in a future release") : void 0;
        return modal;
      }
    };
  }, [modal]);
  var modalContext = (0, import_react37.useMemo)(function() {
    return {
      onHide: handleHide
    };
  }, [handleHide]);
  function getModalManager() {
    if (propsManager)
      return propsManager;
    if (!manager2)
      manager2 = new BootstrapModalManager();
    return manager2;
  }
  function updateDialogStyle(node) {
    if (!canUseDOM_default)
      return;
    var containerIsOverflowing = getModalManager().isContainerOverflowing(modal);
    var modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;
    setStyle({
      paddingRight: containerIsOverflowing && !modalIsOverflowing ? scrollbarSize() : void 0,
      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? scrollbarSize() : void 0
    });
  }
  var handleWindowResize = useEventCallback(function() {
    if (modal) {
      updateDialogStyle(modal.dialog);
    }
  });
  useWillUnmount(function() {
    removeEventListener_default(window, "resize", handleWindowResize);
    if (removeStaticModalAnimationRef.current) {
      removeStaticModalAnimationRef.current();
    }
  });
  var handleDialogMouseDown = function handleDialogMouseDown2() {
    waitingForMouseUpRef.current = true;
  };
  var handleMouseUp = function handleMouseUp2(e) {
    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {
      ignoreBackdropClickRef.current = true;
    }
    waitingForMouseUpRef.current = false;
  };
  var handleStaticModalAnimation = function handleStaticModalAnimation2() {
    setAnimateStaticModal(true);
    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, function() {
      setAnimateStaticModal(false);
    });
  };
  var handleStaticBackdropClick = function handleStaticBackdropClick2(e) {
    if (e.target !== e.currentTarget) {
      return;
    }
    handleStaticModalAnimation();
  };
  var handleClick = function handleClick2(e) {
    if (backdrop === "static") {
      handleStaticBackdropClick(e);
      return;
    }
    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
      ignoreBackdropClickRef.current = false;
      return;
    }
    onHide3();
  };
  var handleEscapeKeyDown = function handleEscapeKeyDown2(e) {
    if (!keyboard && backdrop === "static") {
      e.preventDefault();
      handleStaticModalAnimation();
    } else if (keyboard && onEscapeKeyDown) {
      onEscapeKeyDown(e);
    }
  };
  var handleEnter = function handleEnter2(node) {
    if (node) {
      node.style.display = "block";
      updateDialogStyle(node);
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (onEnter)
      onEnter.apply(void 0, [node].concat(args));
  };
  var handleExit = function handleExit2(node) {
    if (removeStaticModalAnimationRef.current) {
      removeStaticModalAnimationRef.current();
    }
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    if (onExit)
      onExit.apply(void 0, [node].concat(args));
  };
  var handleEntering = function handleEntering2(node) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    if (onEntering)
      onEntering.apply(void 0, [node].concat(args));
    addEventListener_default(window, "resize", handleWindowResize);
  };
  var handleExited = function handleExited2(node) {
    if (node)
      node.style.display = "";
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    if (onExited)
      onExited.apply(void 0, args);
    removeEventListener_default(window, "resize", handleWindowResize);
  };
  var renderBackdrop = (0, import_react37.useCallback)(function(backdropProps) {
    return import_react37.default.createElement("div", _extends({}, backdropProps, {
      className: (0, import_classnames21.default)(bsPrefix + "-backdrop", backdropClassName, !animation && "show")
    }));
  }, [animation, backdropClassName, bsPrefix]);
  var baseModalStyle = _extends({}, style, modalStyle);
  if (!animation) {
    baseModalStyle.display = "block";
  }
  var renderDialog = function renderDialog2(dialogProps) {
    return import_react37.default.createElement("div", _extends({
      role: "dialog"
    }, dialogProps, {
      style: baseModalStyle,
      className: (0, import_classnames21.default)(className, bsPrefix, animateStaticModal && bsPrefix + "-static"),
      onClick: backdrop ? handleClick : void 0,
      onMouseUp: handleMouseUp,
      "aria-labelledby": ariaLabelledby
    }), import_react37.default.createElement(Dialog, _extends({}, props, {
      onMouseDown: handleDialogMouseDown,
      className: dialogClassName,
      contentClassName
    }), children));
  };
  return import_react37.default.createElement(ModalContext_default.Provider, {
    value: modalContext
  }, import_react37.default.createElement(Modal_default, {
    show,
    ref: setModalRef,
    backdrop,
    container,
    keyboard: true,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onEscapeKeyDown: handleEscapeKeyDown,
    onShow,
    onHide: onHide3,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onEntered,
    onExit: handleExit,
    onExiting,
    onExited: handleExited,
    manager: getModalManager(),
    containerClassName: bsPrefix + "-open",
    transition: animation ? DialogTransition : void 0,
    backdropTransition: animation ? BackdropTransition : void 0,
    renderBackdrop,
    renderDialog
  }));
});
Modal2.displayName = "Modal";
Modal2.defaultProps = defaultProps16;
Modal2.Body = ModalBody_default;
Modal2.Header = ModalHeader_default;
Modal2.Title = ModalTitle_default;
Modal2.Footer = ModalFooter_default;
Modal2.Dialog = ModalDialog_default;
Modal2.TRANSITION_DURATION = 300;
Modal2.BACKDROP_TRANSITION_DURATION = 150;
var Modal_default2 = Modal2;

// node_modules/react-bootstrap/esm/Overlay.js
var import_react40 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());

// node_modules/react-overlays/esm/Overlay.js
var import_prop_types6 = __toESM(require_prop_types());
var import_react39 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/react-overlays/node_modules/@restart/hooks/esm/useMergedRefs.js
var import_react38 = __toESM(require_react());
var toFnRef = (ref) => !ref || typeof ref === "function" ? ref : (value) => {
  ref.current = value;
};
function mergeRefs(refA, refB) {
  const a = toFnRef(refA);
  const b = toFnRef(refB);
  return (value) => {
    if (a)
      a(value);
    if (b)
      b(value);
  };
}
function useMergedRefs(refA, refB) {
  return (0, import_react38.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
}
var useMergedRefs_default = useMergedRefs;

// node_modules/react-overlays/esm/Overlay.js
var Overlay = import_react39.default.forwardRef(function(props, outerRef) {
  var flip = props.flip, offset = props.offset, placement = props.placement, _props$containerPaddi = props.containerPadding, containerPadding = _props$containerPaddi === void 0 ? 5 : _props$containerPaddi, _props$popperConfig = props.popperConfig, popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig, Transition = props.transition;
  var _useCallbackRef = useCallbackRef(), rootElement = _useCallbackRef[0], attachRef = _useCallbackRef[1];
  var _useCallbackRef2 = useCallbackRef(), arrowElement = _useCallbackRef2[0], attachArrowRef = _useCallbackRef2[1];
  var mergedRef = useMergedRefs_default(attachRef, outerRef);
  var container = useWaitForDOMRef(props.container);
  var target = useWaitForDOMRef(props.target);
  var _useState = (0, import_react39.useState)(!props.show), exited = _useState[0], setExited = _useState[1];
  var _usePopper = usePopper_default(target, rootElement, mergeOptionsWithPopperConfig({
    placement,
    enableEvents: !!props.show,
    containerPadding: containerPadding || 5,
    flip,
    offset,
    arrowElement,
    popperConfig
  })), styles = _usePopper.styles, attributes = _usePopper.attributes, popper = _objectWithoutPropertiesLoose(_usePopper, ["styles", "attributes"]);
  if (props.show) {
    if (exited)
      setExited(false);
  } else if (!props.transition && !exited) {
    setExited(true);
  }
  var handleHidden = function handleHidden2() {
    setExited(true);
    if (props.onExited) {
      props.onExited.apply(props, arguments);
    }
  };
  var mountOverlay = props.show || Transition && !exited;
  useRootClose_default(rootElement, props.onHide, {
    disabled: !props.rootClose || props.rootCloseDisabled,
    clickTrigger: props.rootCloseEvent
  });
  if (!mountOverlay) {
    return null;
  }
  var child = props.children(_extends({}, popper, {
    show: !!props.show,
    props: _extends({}, attributes.popper, {
      style: styles.popper,
      ref: mergedRef
    }),
    arrowProps: _extends({}, attributes.arrow, {
      style: styles.arrow,
      ref: attachArrowRef
    })
  }));
  if (Transition) {
    var onExit = props.onExit, onExiting = props.onExiting, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered;
    child = import_react39.default.createElement(Transition, {
      "in": props.show,
      appear: true,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered
    }, child);
  }
  return container ? import_react_dom2.default.createPortal(child, container) : null;
});
Overlay.displayName = "Overlay";
Overlay.propTypes = {
  /**
   * Set the visibility of the Overlay
   */
  show: import_prop_types6.default.bool,
  /** Specify where the overlay element is positioned in relation to the target element */
  placement: import_prop_types6.default.oneOf(placements),
  /**
   * A DOM Element, Ref to an element, or function that returns either. The `target` element is where
   * the overlay is positioned relative to.
   */
  target: import_prop_types6.default.any,
  /**
   * A DOM Element, Ref to an element, or function that returns either. The `container` will have the Portal children
   * appended to it.
   */
  container: import_prop_types6.default.any,
  /**
   * Enables the Popper.js `flip` modifier, allowing the Overlay to
   * automatically adjust it's placement in case of overlap with the viewport or toggle.
   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
   */
  flip: import_prop_types6.default.bool,
  /**
   * A render prop that returns an element to overlay and position. See
   * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.
   *
   * @type {Function ({
   *   show: boolean,
   *   placement: Placement,
   *   update: () => void,
   *   forceUpdate: () => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     aria-labelledby: ?string
   *     [string]: string | number,
   *   },
   *   arrowProps: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     [string]: string | number,
   *   },
   * }) => React.Element}
   */
  children: import_prop_types6.default.func.isRequired,
  /**
   * Control how much space there is between the edge of the boundary element and overlay.
   * A convenience shortcut to setting `popperConfig.modfiers.preventOverflow.padding`
   */
  containerPadding: import_prop_types6.default.number,
  /**
   * A set of popper options and props passed directly to react-popper's Popper component.
   */
  popperConfig: import_prop_types6.default.object,
  /**
   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
   */
  rootClose: import_prop_types6.default.bool,
  /**
   * Specify event for toggling overlay
   */
  rootCloseEvent: import_prop_types6.default.oneOf(["click", "mousedown"]),
  /**
   * Specify disabled for disable RootCloseWrapper
   */
  rootCloseDisabled: import_prop_types6.default.bool,
  /**
   * A Callback fired by the Overlay when it wishes to be hidden.
   *
   * __required__ when `rootClose` is `true`.
   *
   * @type func
   */
  onHide: function onHide2(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (props.rootClose) {
      var _PropTypes$func;
      return (_PropTypes$func = import_prop_types6.default.func).isRequired.apply(_PropTypes$func, [props].concat(args));
    }
    return import_prop_types6.default.func.apply(import_prop_types6.default, [props].concat(args));
  },
  /**
   * A `react-transition-group@2.0.0` `<Transition/>` component
   * used to animate the overlay as it changes visibility.
   */
  // @ts-ignore
  transition: import_prop_types6.default.elementType,
  /**
   * Callback fired before the Overlay transitions in
   */
  onEnter: import_prop_types6.default.func,
  /**
   * Callback fired as the Overlay begins to transition in
   */
  onEntering: import_prop_types6.default.func,
  /**
   * Callback fired after the Overlay finishes transitioning in
   */
  onEntered: import_prop_types6.default.func,
  /**
   * Callback fired right before the Overlay transitions out
   */
  onExit: import_prop_types6.default.func,
  /**
   * Callback fired as the Overlay begins to transition out
   */
  onExiting: import_prop_types6.default.func,
  /**
   * Callback fired after the Overlay finishes transitioning out
   */
  onExited: import_prop_types6.default.func
};
var Overlay_default = Overlay;

// node_modules/react-bootstrap/esm/Overlay.js
var defaultProps17 = {
  transition: Fade_default,
  rootClose: false,
  show: false,
  placement: "top"
};
function wrapRefs(props, arrowProps) {
  var ref = props.ref;
  var aRef = arrowProps.ref;
  props.ref = ref.__wrapped || (ref.__wrapped = function(r) {
    return ref(safeFindDOMNode(r));
  });
  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = function(r) {
    return aRef(safeFindDOMNode(r));
  });
}
function Overlay2(_ref) {
  var overlay = _ref.children, transition = _ref.transition, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig, outerProps = _objectWithoutPropertiesLoose(_ref, ["children", "transition", "popperConfig"]);
  var popperRef = (0, import_react40.useRef)({});
  var _usePopperMarginModif = usePopperMarginModifiers(), ref = _usePopperMarginModif[0], marginModifiers = _usePopperMarginModif[1];
  var actualTransition = transition === true ? Fade_default : transition || null;
  return import_react40.default.createElement(Overlay_default, _extends({}, outerProps, {
    ref,
    popperConfig: _extends({}, popperConfig, {
      modifiers: marginModifiers.concat(popperConfig.modifiers || [])
    }),
    transition: actualTransition
  }), function(_ref2) {
    var _state$modifiersData$;
    var overlayProps = _ref2.props, arrowProps = _ref2.arrowProps, show = _ref2.show, update = _ref2.update, _ = _ref2.forceUpdate, placement = _ref2.placement, state = _ref2.state, props = _objectWithoutPropertiesLoose(_ref2, ["props", "arrowProps", "show", "update", "forceUpdate", "placement", "state"]);
    wrapRefs(overlayProps, arrowProps);
    var popper = Object.assign(popperRef.current, {
      state,
      scheduleUpdate: update,
      placement,
      outOfBoundaries: (state == null ? void 0 : (_state$modifiersData$ = state.modifiersData.hide) == null ? void 0 : _state$modifiersData$.isReferenceHidden) || false
    });
    if (typeof overlay === "function")
      return overlay(_extends({}, props, overlayProps, {
        placement,
        show
      }, !transition && show && {
        className: "show"
      }, {
        popper,
        arrowProps
      }));
    return import_react40.default.cloneElement(overlay, _extends({}, props, overlayProps, {
      placement,
      arrowProps,
      popper,
      className: (0, import_classnames22.default)(overlay.props.className, !transition && show && "show"),
      style: _extends({}, overlay.props.style, overlayProps.style)
    }));
  });
}
Overlay2.defaultProps = defaultProps17;
var Overlay_default2 = Overlay2;

// node_modules/react-bootstrap/esm/OverlayTrigger.js
var import_react41 = __toESM(require_react());
var import_warning3 = __toESM(require_warning());
var RefHolder = function(_React$Component) {
  _inheritsLoose(RefHolder2, _React$Component);
  function RefHolder2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = RefHolder2.prototype;
  _proto.render = function render() {
    return this.props.children;
  };
  return RefHolder2;
}(import_react41.default.Component);
function normalizeDelay(delay) {
  return delay && typeof delay === "object" ? delay : {
    show: delay,
    hide: delay
  };
}
function handleMouseOverOut(handler, args, relatedNative) {
  var e = args[0];
  var target = e.currentTarget;
  var related = e.relatedTarget || e.nativeEvent[relatedNative];
  if ((!related || related !== target) && !contains(target, related)) {
    handler.apply(void 0, args);
  }
}
var defaultProps18 = {
  defaultShow: false,
  trigger: ["hover", "focus"]
};
function OverlayTrigger(_ref) {
  var trigger = _ref.trigger, overlay = _ref.overlay, children = _ref.children, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig, propsShow = _ref.show, _ref$defaultShow = _ref.defaultShow, defaultShow = _ref$defaultShow === void 0 ? false : _ref$defaultShow, onToggle = _ref.onToggle, propsDelay = _ref.delay, placement = _ref.placement, _ref$flip = _ref.flip, flip = _ref$flip === void 0 ? placement && placement.indexOf("auto") !== -1 : _ref$flip, props = _objectWithoutPropertiesLoose(_ref, ["trigger", "overlay", "children", "popperConfig", "show", "defaultShow", "onToggle", "delay", "placement", "flip"]);
  var triggerNodeRef = (0, import_react41.useRef)(null);
  var timeout = useTimeout();
  var hoverStateRef = (0, import_react41.useRef)("");
  var _useUncontrolledProp = useUncontrolledProp(propsShow, defaultShow, onToggle), show = _useUncontrolledProp[0], setShow = _useUncontrolledProp[1];
  var delay = normalizeDelay(propsDelay);
  var _ref2 = typeof children !== "function" ? import_react41.default.Children.only(children).props : {}, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick;
  var getTarget = (0, import_react41.useCallback)(function() {
    return safeFindDOMNode(triggerNodeRef.current);
  }, []);
  var handleShow = (0, import_react41.useCallback)(function() {
    timeout.clear();
    hoverStateRef.current = "show";
    if (!delay.show) {
      setShow(true);
      return;
    }
    timeout.set(function() {
      if (hoverStateRef.current === "show")
        setShow(true);
    }, delay.show);
  }, [delay.show, setShow, timeout]);
  var handleHide = (0, import_react41.useCallback)(function() {
    timeout.clear();
    hoverStateRef.current = "hide";
    if (!delay.hide) {
      setShow(false);
      return;
    }
    timeout.set(function() {
      if (hoverStateRef.current === "hide")
        setShow(false);
    }, delay.hide);
  }, [delay.hide, setShow, timeout]);
  var handleFocus = (0, import_react41.useCallback)(function() {
    handleShow();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    onFocus == null ? void 0 : onFocus.apply(void 0, args);
  }, [handleShow, onFocus]);
  var handleBlur = (0, import_react41.useCallback)(function() {
    handleHide();
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    onBlur == null ? void 0 : onBlur.apply(void 0, args);
  }, [handleHide, onBlur]);
  var handleClick = (0, import_react41.useCallback)(function() {
    setShow(!show);
    if (onClick)
      onClick.apply(void 0, arguments);
  }, [onClick, setShow, show]);
  var handleMouseOver = (0, import_react41.useCallback)(function() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    handleMouseOverOut(handleShow, args, "fromElement");
  }, [handleShow]);
  var handleMouseOut = (0, import_react41.useCallback)(function() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    handleMouseOverOut(handleHide, args, "toElement");
  }, [handleHide]);
  var triggers = trigger == null ? [] : [].concat(trigger);
  var triggerProps = {};
  if (triggers.indexOf("click") !== -1) {
    triggerProps.onClick = handleClick;
  }
  if (triggers.indexOf("focus") !== -1) {
    triggerProps.onFocus = handleFocus;
    triggerProps.onBlur = handleBlur;
  }
  if (triggers.indexOf("hover") !== -1) {
    true ? (0, import_warning3.default)(triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : void 0;
    triggerProps.onMouseOver = handleMouseOver;
    triggerProps.onMouseOut = handleMouseOut;
  }
  return import_react41.default.createElement(import_react41.default.Fragment, null, typeof children === "function" ? children(_extends({}, triggerProps, {
    ref: triggerNodeRef
  })) : import_react41.default.createElement(RefHolder, {
    ref: triggerNodeRef
  }, (0, import_react41.cloneElement)(children, triggerProps)), import_react41.default.createElement(Overlay_default2, _extends({}, props, {
    show,
    onHide: handleHide,
    flip,
    placement,
    popperConfig,
    target: getTarget
  }), overlay));
}
OverlayTrigger.defaultProps = defaultProps18;
var OverlayTrigger_default = OverlayTrigger;

// node_modules/react-bootstrap/esm/PageItem.js
var import_classnames23 = __toESM(require_classnames());
var import_react42 = __toESM(require_react());
var defaultProps19 = {
  active: false,
  disabled: false,
  activeLabel: "(current)"
};
var PageItem = import_react42.default.forwardRef(function(_ref, ref) {
  var active = _ref.active, disabled = _ref.disabled, className = _ref.className, style = _ref.style, activeLabel = _ref.activeLabel, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["active", "disabled", "className", "style", "activeLabel", "children"]);
  var Component = active || disabled ? "span" : SafeAnchor_default;
  return import_react42.default.createElement("li", {
    ref,
    style,
    className: (0, import_classnames23.default)(className, "page-item", {
      active,
      disabled
    })
  }, import_react42.default.createElement(Component, _extends({
    className: "page-link",
    disabled
  }, props), children, active && activeLabel && import_react42.default.createElement("span", {
    className: "sr-only"
  }, activeLabel)));
});
PageItem.defaultProps = defaultProps19;
PageItem.displayName = "PageItem";
var PageItem_default = PageItem;
function createButton(name, defaultValue, label) {
  if (label === void 0) {
    label = name;
  }
  function Button(_ref2) {
    var children = _ref2.children, props = _objectWithoutPropertiesLoose(_ref2, ["children"]);
    return import_react42.default.createElement(PageItem, props, import_react42.default.createElement("span", {
      "aria-hidden": "true"
    }, children || defaultValue), import_react42.default.createElement("span", {
      className: "sr-only"
    }, label));
  }
  Button.displayName = name;
  return Button;
}
var First = createButton("First", "Â«");
var Prev = createButton("Prev", "â€¹", "Previous");
var Ellipsis = createButton("Ellipsis", "â€¦", "More");
var Next = createButton("Next", "â€º");
var Last = createButton("Last", "Â»");

// node_modules/react-bootstrap/esm/Pagination.js
var import_classnames24 = __toESM(require_classnames());
var import_react43 = __toESM(require_react());
var Pagination = import_react43.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, size2 = _ref.size, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "size"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "pagination");
  return import_react43.default.createElement("ul", _extends({
    ref
  }, props, {
    className: (0, import_classnames24.default)(className, decoratedBsPrefix, size2 && decoratedBsPrefix + "-" + size2)
  }), children);
});
Pagination.First = First;
Pagination.Prev = Prev;
Pagination.Ellipsis = Ellipsis;
Pagination.Item = PageItem_default;
Pagination.Next = Next;
Pagination.Last = Last;
var Pagination_default = Pagination;

// node_modules/react-bootstrap/esm/Popover.js
var import_classnames27 = __toESM(require_classnames());
var import_react46 = __toESM(require_react());
var import_isRequiredForA11y = __toESM(require_isRequiredForA11y());

// node_modules/react-bootstrap/esm/PopoverTitle.js
var import_classnames25 = __toESM(require_classnames());
var import_react44 = __toESM(require_react());
var PopoverTitle = import_react44.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["as", "bsPrefix", "className", "children"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "popover-header");
  return import_react44.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames25.default)(bsPrefix, className)
  }), children);
});
var PopoverTitle_default = PopoverTitle;

// node_modules/react-bootstrap/esm/PopoverContent.js
var import_classnames26 = __toESM(require_classnames());
var import_react45 = __toESM(require_react());
var PopoverContent = import_react45.default.forwardRef(function(_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["as", "bsPrefix", "className", "children"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "popover-body");
  return import_react45.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames26.default)(className, bsPrefix)
  }), children);
});
var PopoverContent_default = PopoverContent;

// node_modules/react-bootstrap/esm/Popover.js
var defaultProps20 = {
  placement: "right"
};
var Popover = import_react46.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, placement = _ref.placement, className = _ref.className, style = _ref.style, children = _ref.children, content = _ref.content, arrowProps = _ref.arrowProps, _ = _ref.popper, _1 = _ref.show, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "placement", "className", "style", "children", "content", "arrowProps", "popper", "show"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "popover");
  var _ref2 = (placement == null ? void 0 : placement.split("-")) || [], primaryPlacement = _ref2[0];
  return import_react46.default.createElement("div", _extends({
    ref,
    role: "tooltip",
    style,
    "x-placement": primaryPlacement,
    className: (0, import_classnames27.default)(className, decoratedBsPrefix, primaryPlacement && "bs-popover-" + primaryPlacement)
  }, props), import_react46.default.createElement("div", _extends({
    className: "arrow"
  }, arrowProps)), content ? import_react46.default.createElement(PopoverContent_default, null, children) : children);
});
Popover.defaultProps = defaultProps20;
Popover.Title = PopoverTitle_default;
Popover.Content = PopoverContent_default;
var Popover_default = Popover;

// node_modules/react-bootstrap/esm/ProgressBar.js
var import_classnames28 = __toESM(require_classnames());
var import_react47 = __toESM(require_react());
var ROUND_PRECISION = 1e3;
var defaultProps21 = {
  min: 0,
  max: 100,
  animated: false,
  isChild: false,
  srOnly: false,
  striped: false
};
function getPercentage(now, min, max) {
  var percentage = (now - min) / (max - min) * 100;
  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar(_ref, ref) {
  var _classNames;
  var min = _ref.min, now = _ref.now, max = _ref.max, label = _ref.label, srOnly = _ref.srOnly, striped = _ref.striped, animated = _ref.animated, className = _ref.className, style = _ref.style, variant = _ref.variant, bsPrefix = _ref.bsPrefix, props = _objectWithoutPropertiesLoose(_ref, ["min", "now", "max", "label", "srOnly", "striped", "animated", "className", "style", "variant", "bsPrefix"]);
  return import_react47.default.createElement("div", _extends({
    ref
  }, props, {
    role: "progressbar",
    className: (0, import_classnames28.default)(className, bsPrefix + "-bar", (_classNames = {}, _classNames["bg-" + variant] = variant, _classNames[bsPrefix + "-bar-animated"] = animated, _classNames[bsPrefix + "-bar-striped"] = animated || striped, _classNames)),
    style: _extends({
      width: getPercentage(now, min, max) + "%"
    }, style),
    "aria-valuenow": now,
    "aria-valuemin": min,
    "aria-valuemax": max
  }), srOnly ? import_react47.default.createElement("span", {
    className: "sr-only"
  }, label) : label);
}
var ProgressBar = import_react47.default.forwardRef(function(_ref2, ref) {
  var isChild = _ref2.isChild, props = _objectWithoutPropertiesLoose(_ref2, ["isChild"]);
  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, "progress");
  if (isChild) {
    return renderProgressBar(props, ref);
  }
  var min = props.min, now = props.now, max = props.max, label = props.label, srOnly = props.srOnly, striped = props.striped, animated = props.animated, bsPrefix = props.bsPrefix, variant = props.variant, className = props.className, children = props.children, wrapperProps = _objectWithoutPropertiesLoose(props, ["min", "now", "max", "label", "srOnly", "striped", "animated", "bsPrefix", "variant", "className", "children"]);
  return import_react47.default.createElement("div", _extends({
    ref
  }, wrapperProps, {
    className: (0, import_classnames28.default)(className, bsPrefix)
  }), children ? map(children, function(child) {
    return (0, import_react47.cloneElement)(child, {
      isChild: true
    });
  }) : renderProgressBar({
    min,
    now,
    max,
    label,
    srOnly,
    striped,
    animated,
    bsPrefix,
    variant
  }, ref));
});
ProgressBar.displayName = "ProgressBar";
ProgressBar.defaultProps = defaultProps21;
var ProgressBar_default = ProgressBar;

// node_modules/react-bootstrap/esm/ResponsiveEmbed.js
var import_classnames29 = __toESM(require_classnames());
var import_react48 = __toESM(require_react());
var defaultProps22 = {
  aspectRatio: "1by1"
};
var ResponsiveEmbed = import_react48.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, aspectRatio = _ref.aspectRatio, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "aspectRatio"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "embed-responsive");
  var child = import_react48.default.Children.only(children);
  return import_react48.default.createElement("div", _extends({
    ref
  }, props, {
    className: (0, import_classnames29.default)(decoratedBsPrefix, className, aspectRatio && decoratedBsPrefix + "-" + aspectRatio)
  }), import_react48.default.cloneElement(child, {
    className: (0, import_classnames29.default)(child.props.className, decoratedBsPrefix + "-item")
  }));
});
ResponsiveEmbed.defaultProps = defaultProps22;
var ResponsiveEmbed_default = ResponsiveEmbed;

// node_modules/react-bootstrap/esm/Row.js
var import_classnames30 = __toESM(require_classnames());
var import_react49 = __toESM(require_react());
var DEVICE_SIZES = ["xl", "lg", "md", "sm", "xs"];
var defaultProps23 = {
  noGutters: false
};
var Row = import_react49.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, noGutters = _ref.noGutters, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "noGutters", "as"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "row");
  var sizePrefix = decoratedBsPrefix + "-cols";
  var classes = [];
  DEVICE_SIZES.forEach(function(brkPoint) {
    var propValue = props[brkPoint];
    delete props[brkPoint];
    var cols;
    if (propValue != null && typeof propValue === "object") {
      cols = propValue.cols;
    } else {
      cols = propValue;
    }
    var infix = brkPoint !== "xs" ? "-" + brkPoint : "";
    if (cols != null)
      classes.push("" + sizePrefix + infix + "-" + cols);
  });
  return import_react49.default.createElement(Component, _extends({
    ref
  }, props, {
    className: import_classnames30.default.apply(void 0, [className, decoratedBsPrefix, noGutters && "no-gutters"].concat(classes))
  }));
});
Row.displayName = "Row";
Row.defaultProps = defaultProps23;
var Row_default = Row;

// node_modules/react-bootstrap/esm/Spinner.js
var import_classnames31 = __toESM(require_classnames());
var import_react50 = __toESM(require_react());
var Spinner = import_react50.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, variant = _ref.variant, animation = _ref.animation, size2 = _ref.size, children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "variant", "animation", "size", "children", "as", "className"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "spinner");
  var bsSpinnerPrefix = bsPrefix + "-" + animation;
  return import_react50.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames31.default)(className, bsSpinnerPrefix, size2 && bsSpinnerPrefix + "-" + size2, variant && "text-" + variant)
  }), children);
});
Spinner.displayName = "Spinner";
var Spinner_default = Spinner;

// node_modules/react-bootstrap/esm/SplitButton.js
var import_react51 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var propTypes6 = {
  /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string|number}
   * @required
   */
  id: import_prop_types7.default.any,
  /**
   * Accessible label for the toggle; the value of `title` if not specified.
   */
  toggleLabel: import_prop_types7.default.string,
  /** An `href` passed to the non-toggle Button */
  href: import_prop_types7.default.string,
  /** An anchor `target` passed to the non-toggle Button */
  target: import_prop_types7.default.string,
  /** An `onClick` handler passed to the non-toggle Button */
  onClick: import_prop_types7.default.func,
  /** The content of the non-toggle Button.  */
  title: import_prop_types7.default.node.isRequired,
  /** A `type` passed to the non-toggle Button */
  type: import_prop_types7.default.string,
  /** Disables both Buttons  */
  disabled: import_prop_types7.default.bool,
  /**
   * Aligns the dropdown menu responsively.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"left"|"right"|{ sm: "left"|"right" }|{ md: "left"|"right" }|{ lg: "left"|"right" }|{ xl: "left"|"right"} }
   */
  menuAlign: alignPropType,
  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
  menuRole: import_prop_types7.default.string,
  /** Whether to render the dropdown menu in the DOM before the first time it is shown */
  renderMenuOnMount: import_prop_types7.default.bool,
  /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */
  rootCloseEvent: import_prop_types7.default.string,
  /** @ignore */
  bsPrefix: import_prop_types7.default.string,
  /** @ignore */
  variant: import_prop_types7.default.string,
  /** @ignore */
  size: import_prop_types7.default.string
};
var defaultProps24 = {
  toggleLabel: "Toggle dropdown",
  type: "button"
};
var SplitButton = import_react51.default.forwardRef(function(_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, size2 = _ref.size, variant = _ref.variant, title = _ref.title, type = _ref.type, toggleLabel = _ref.toggleLabel, children = _ref.children, onClick = _ref.onClick, href = _ref.href, target = _ref.target, menuAlign = _ref.menuAlign, menuRole = _ref.menuRole, renderMenuOnMount = _ref.renderMenuOnMount, rootCloseEvent = _ref.rootCloseEvent, props = _objectWithoutPropertiesLoose(_ref, ["id", "bsPrefix", "size", "variant", "title", "type", "toggleLabel", "children", "onClick", "href", "target", "menuAlign", "menuRole", "renderMenuOnMount", "rootCloseEvent"]);
  return import_react51.default.createElement(Dropdown_default, _extends({
    ref
  }, props, {
    as: ButtonGroup_default
  }), import_react51.default.createElement(Button_default, {
    size: size2,
    variant,
    disabled: props.disabled,
    bsPrefix,
    href,
    target,
    onClick,
    type
  }, title), import_react51.default.createElement(Dropdown_default.Toggle, {
    split: true,
    id: id ? id.toString() : void 0,
    size: size2,
    variant,
    disabled: props.disabled,
    childBsPrefix: bsPrefix
  }, import_react51.default.createElement("span", {
    className: "sr-only"
  }, toggleLabel)), import_react51.default.createElement(Dropdown_default.Menu, {
    align: menuAlign,
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent
  }, children));
});
SplitButton.propTypes = propTypes6;
SplitButton.defaultProps = defaultProps24;
SplitButton.displayName = "SplitButton";
var SplitButton_default = SplitButton;

// node_modules/react-bootstrap/esm/Tab.js
var import_react55 = __toESM(require_react());

// node_modules/react-bootstrap/esm/TabContainer.js
var import_react52 = __toESM(require_react());
var TabContainer = function TabContainer2(props) {
  var _useUncontrolled = useUncontrolled(props, {
    activeKey: "onSelect"
  }), id = _useUncontrolled.id, generateCustomChildId = _useUncontrolled.generateChildId, onSelect = _useUncontrolled.onSelect, activeKey = _useUncontrolled.activeKey, transition = _useUncontrolled.transition, mountOnEnter = _useUncontrolled.mountOnEnter, unmountOnExit = _useUncontrolled.unmountOnExit, children = _useUncontrolled.children;
  var generateChildId = (0, import_react52.useMemo)(function() {
    return generateCustomChildId || function(key, type) {
      return id ? id + "-" + type + "-" + key : null;
    };
  }, [id, generateCustomChildId]);
  var tabContext = (0, import_react52.useMemo)(function() {
    return {
      onSelect,
      activeKey,
      transition,
      mountOnEnter: mountOnEnter || false,
      unmountOnExit: unmountOnExit || false,
      getControlledId: function getControlledId(key) {
        return generateChildId(key, "tabpane");
      },
      getControllerId: function getControllerId(key) {
        return generateChildId(key, "tab");
      }
    };
  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);
  return import_react52.default.createElement(TabContext_default.Provider, {
    value: tabContext
  }, import_react52.default.createElement(SelectableContext_default.Provider, {
    value: onSelect || null
  }, children));
};
var TabContainer_default = TabContainer;

// node_modules/react-bootstrap/esm/TabContent.js
var import_classnames32 = __toESM(require_classnames());
var import_react53 = __toESM(require_react());
var TabContent = import_react53.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, _ref$as = _ref.as, Component = _ref$as === void 0 ? "div" : _ref$as, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "as", "className"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "tab-content");
  return import_react53.default.createElement(Component, _extends({
    ref
  }, props, {
    className: (0, import_classnames32.default)(className, decoratedBsPrefix)
  }));
});
var TabContent_default = TabContent;

// node_modules/react-bootstrap/esm/TabPane.js
var import_classnames33 = __toESM(require_classnames());
var import_react54 = __toESM(require_react());
function useTabContext(props) {
  var context2 = (0, import_react54.useContext)(TabContext_default);
  if (!context2)
    return props;
  var activeKey = context2.activeKey, getControlledId = context2.getControlledId, getControllerId = context2.getControllerId, rest = _objectWithoutPropertiesLoose(context2, ["activeKey", "getControlledId", "getControllerId"]);
  var shouldTransition = props.transition !== false && rest.transition !== false;
  var key = makeEventKey(props.eventKey);
  return _extends({}, props, {
    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,
    id: getControlledId(props.eventKey),
    "aria-labelledby": getControllerId(props.eventKey),
    transition: shouldTransition && (props.transition || rest.transition || Fade_default),
    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,
    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit
  });
}
var TabPane = import_react54.default.forwardRef(function(props, ref) {
  var _useTabContext = useTabContext(props), bsPrefix = _useTabContext.bsPrefix, className = _useTabContext.className, active = _useTabContext.active, onEnter = _useTabContext.onEnter, onEntering = _useTabContext.onEntering, onEntered = _useTabContext.onEntered, onExit = _useTabContext.onExit, onExiting = _useTabContext.onExiting, onExited = _useTabContext.onExited, mountOnEnter = _useTabContext.mountOnEnter, unmountOnExit = _useTabContext.unmountOnExit, Transition = _useTabContext.transition, _useTabContext$as = _useTabContext.as, Component = _useTabContext$as === void 0 ? "div" : _useTabContext$as, _ = _useTabContext.eventKey, rest = _objectWithoutPropertiesLoose(_useTabContext, ["bsPrefix", "className", "active", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "mountOnEnter", "unmountOnExit", "transition", "as", "eventKey"]);
  var prefix = useBootstrapPrefix(bsPrefix, "tab-pane");
  if (!active && !Transition && unmountOnExit)
    return null;
  var pane = import_react54.default.createElement(Component, _extends({}, rest, {
    ref,
    role: "tabpanel",
    "aria-hidden": !active,
    className: (0, import_classnames33.default)(className, prefix, {
      active
    })
  }));
  if (Transition)
    pane = import_react54.default.createElement(Transition, {
      in: active,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      mountOnEnter,
      unmountOnExit
    }, pane);
  return import_react54.default.createElement(TabContext_default.Provider, {
    value: null
  }, import_react54.default.createElement(SelectableContext_default.Provider, {
    value: null
  }, pane));
});
TabPane.displayName = "TabPane";
var TabPane_default = TabPane;

// node_modules/react-bootstrap/esm/Tab.js
var Tab = function(_React$Component) {
  _inheritsLoose(Tab2, _React$Component);
  function Tab2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Tab2.prototype;
  _proto.render = function render() {
    throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly");
    return null;
  };
  return Tab2;
}(import_react55.default.Component);
Tab.Container = TabContainer_default;
Tab.Content = TabContent_default;
Tab.Pane = TabPane_default;
var Tab_default = Tab;

// node_modules/react-bootstrap/esm/Table.js
var import_classnames34 = __toESM(require_classnames());
var import_react56 = __toESM(require_react());
var Table = import_react56.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, striped = _ref.striped, bordered = _ref.bordered, borderless = _ref.borderless, hover = _ref.hover, size2 = _ref.size, variant = _ref.variant, responsive = _ref.responsive, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "striped", "bordered", "borderless", "hover", "size", "variant", "responsive"]);
  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "table");
  var classes = (0, import_classnames34.default)(className, decoratedBsPrefix, variant && decoratedBsPrefix + "-" + variant, size2 && decoratedBsPrefix + "-" + size2, striped && decoratedBsPrefix + "-striped", bordered && decoratedBsPrefix + "-bordered", borderless && decoratedBsPrefix + "-borderless", hover && decoratedBsPrefix + "-hover");
  var table = import_react56.default.createElement("table", _extends({}, props, {
    className: classes,
    ref
  }));
  if (responsive) {
    var responsiveClass = decoratedBsPrefix + "-responsive";
    if (typeof responsive === "string") {
      responsiveClass = responsiveClass + "-" + responsive;
    }
    return import_react56.default.createElement("div", {
      className: responsiveClass
    }, table);
  }
  return table;
});
var Table_default = Table;

// node_modules/react-bootstrap/esm/Tabs.js
var import_react57 = __toESM(require_react());
var import_isRequiredForA11y2 = __toESM(require_isRequiredForA11y());
var defaultProps25 = {
  variant: "tabs",
  mountOnEnter: false,
  unmountOnExit: false
};
function getDefaultActiveKey(children) {
  var defaultActiveKey;
  forEach(children, function(child) {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });
  return defaultActiveKey;
}
function renderTab(child) {
  var _child$props = child.props, title = _child$props.title, eventKey = _child$props.eventKey, disabled = _child$props.disabled, tabClassName = _child$props.tabClassName, id = _child$props.id;
  if (title == null) {
    return null;
  }
  return import_react57.default.createElement(NavItem_default, {
    as: NavLink_default,
    eventKey,
    disabled,
    id,
    className: tabClassName
  }, title);
}
var Tabs = function Tabs2(props) {
  var _useUncontrolled = useUncontrolled(props, {
    activeKey: "onSelect"
  }), id = _useUncontrolled.id, onSelect = _useUncontrolled.onSelect, transition = _useUncontrolled.transition, mountOnEnter = _useUncontrolled.mountOnEnter, unmountOnExit = _useUncontrolled.unmountOnExit, children = _useUncontrolled.children, _useUncontrolled$acti = _useUncontrolled.activeKey, activeKey = _useUncontrolled$acti === void 0 ? getDefaultActiveKey(children) : _useUncontrolled$acti, controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, ["id", "onSelect", "transition", "mountOnEnter", "unmountOnExit", "children", "activeKey"]);
  return import_react57.default.createElement(TabContainer_default, {
    id,
    activeKey,
    onSelect,
    transition,
    mountOnEnter,
    unmountOnExit
  }, import_react57.default.createElement(Nav_default, _extends({}, controlledProps, {
    role: "tablist",
    as: "nav"
  }), map(children, renderTab)), import_react57.default.createElement(TabContent_default, null, map(children, function(child) {
    var childProps = _extends({}, child.props);
    delete childProps.title;
    delete childProps.disabled;
    delete childProps.tabClassName;
    return import_react57.default.createElement(TabPane_default, childProps);
  })));
};
Tabs.defaultProps = defaultProps25;
Tabs.displayName = "Tabs";
var Tabs_default = Tabs;

// node_modules/react-bootstrap/esm/Toast.js
var import_react60 = __toESM(require_react());
var import_classnames36 = __toESM(require_classnames());

// node_modules/react-bootstrap/esm/ToastHeader.js
var import_classnames35 = __toESM(require_classnames());
var import_react59 = __toESM(require_react());

// node_modules/react-bootstrap/esm/ToastContext.js
var import_react58 = __toESM(require_react());
var ToastContext = import_react58.default.createContext({
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onClose: function onClose() {
  }
});
var ToastContext_default = ToastContext;

// node_modules/react-bootstrap/esm/ToastHeader.js
var defaultProps26 = {
  closeLabel: "Close",
  closeButton: true
};
var ToastHeader = import_react59.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, closeLabel = _ref.closeLabel, closeButton = _ref.closeButton, className = _ref.className, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "closeLabel", "closeButton", "className", "children"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "toast-header");
  var context2 = (0, import_react59.useContext)(ToastContext_default);
  var handleClick = useEventCallback(function(e) {
    if (context2 && context2.onClose) {
      context2.onClose(e);
    }
  });
  return import_react59.default.createElement("div", _extends({
    ref
  }, props, {
    className: (0, import_classnames35.default)(bsPrefix, className)
  }), children, closeButton && import_react59.default.createElement(CloseButton_default, {
    label: closeLabel,
    onClick: handleClick,
    className: "ml-2 mb-1",
    "data-dismiss": "toast"
  }));
});
ToastHeader.displayName = "ToastHeader";
ToastHeader.defaultProps = defaultProps26;
var ToastHeader_default = ToastHeader;

// node_modules/react-bootstrap/esm/ToastBody.js
var ToastBody_default = createWithBsPrefix("toast-body");

// node_modules/react-bootstrap/esm/Toast.js
var Toast = import_react60.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, _ref$transition = _ref.transition, Transition = _ref$transition === void 0 ? Fade_default : _ref$transition, _ref$show = _ref.show, show = _ref$show === void 0 ? true : _ref$show, _ref$animation = _ref.animation, animation = _ref$animation === void 0 ? true : _ref$animation, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 3e3 : _ref$delay, _ref$autohide = _ref.autohide, autohide = _ref$autohide === void 0 ? false : _ref$autohide, onClose2 = _ref.onClose, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "transition", "show", "animation", "delay", "autohide", "onClose"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "toast");
  var delayRef = (0, import_react60.useRef)(delay);
  var onCloseRef = (0, import_react60.useRef)(onClose2);
  (0, import_react60.useEffect)(function() {
    delayRef.current = delay;
    onCloseRef.current = onClose2;
  }, [delay, onClose2]);
  var autohideTimeout = useTimeout();
  var autohideToast = !!(autohide && show);
  var autohideFunc = (0, import_react60.useCallback)(function() {
    if (autohideToast) {
      onCloseRef.current == null ? void 0 : onCloseRef.current();
    }
  }, [autohideToast]);
  (0, import_react60.useEffect)(function() {
    autohideTimeout.set(autohideFunc, delayRef.current);
  }, [autohideTimeout, autohideFunc]);
  var toastContext = (0, import_react60.useMemo)(function() {
    return {
      onClose: onClose2
    };
  }, [onClose2]);
  var hasAnimation = !!(Transition && animation);
  var toast = import_react60.default.createElement("div", _extends({}, props, {
    ref,
    className: (0, import_classnames36.default)(bsPrefix, className, !hasAnimation && (show ? "show" : "hide")),
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true"
  }), children);
  return import_react60.default.createElement(ToastContext_default.Provider, {
    value: toastContext
  }, hasAnimation && Transition ? import_react60.default.createElement(Transition, {
    in: show,
    unmountOnExit: true
  }, toast) : toast);
});
Toast.displayName = "Toast";
var Toast_default = Object.assign(Toast, {
  Body: ToastBody_default,
  Header: ToastHeader_default
});

// node_modules/react-bootstrap/esm/ToggleButton.js
var import_classnames37 = __toESM(require_classnames());
var import_react61 = __toESM(require_react());
var noop = function noop2() {
  return void 0;
};
var ToggleButton = import_react61.default.forwardRef(function(_ref, ref) {
  var children = _ref.children, name = _ref.name, className = _ref.className, checked = _ref.checked, type = _ref.type, onChange = _ref.onChange, value = _ref.value, disabled = _ref.disabled, inputRef = _ref.inputRef, props = _objectWithoutPropertiesLoose(_ref, ["children", "name", "className", "checked", "type", "onChange", "value", "disabled", "inputRef"]);
  var _useState = (0, import_react61.useState)(false), focused = _useState[0], setFocused = _useState[1];
  var handleFocus = (0, import_react61.useCallback)(function(e) {
    if (e.target.tagName === "INPUT")
      setFocused(true);
  }, []);
  var handleBlur = (0, import_react61.useCallback)(function(e) {
    if (e.target.tagName === "INPUT")
      setFocused(false);
  }, []);
  return import_react61.default.createElement(Button_default, _extends({}, props, {
    ref,
    className: (0, import_classnames37.default)(className, focused && "focus", disabled && "disabled"),
    type: void 0,
    active: !!checked,
    as: "label"
  }), import_react61.default.createElement("input", {
    name,
    type,
    value,
    ref: inputRef,
    autoComplete: "off",
    checked: !!checked,
    disabled: !!disabled,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: onChange || noop
  }), children);
});
ToggleButton.displayName = "ToggleButton";
var ToggleButton_default = ToggleButton;

// node_modules/react-bootstrap/esm/ToggleButtonGroup.js
var import_react62 = __toESM(require_react());
var import_invariant = __toESM(require_browser());
var defaultProps27 = {
  type: "radio",
  vertical: false
};
var ToggleButtonGroup = import_react62.default.forwardRef(function(props, ref) {
  var _useUncontrolled = useUncontrolled(props, {
    value: "onChange"
  }), children = _useUncontrolled.children, type = _useUncontrolled.type, name = _useUncontrolled.name, value = _useUncontrolled.value, onChange = _useUncontrolled.onChange, controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, ["children", "type", "name", "value", "onChange"]);
  var getValues = function getValues2() {
    return value == null ? [] : [].concat(value);
  };
  var handleToggle = function handleToggle2(inputVal, event) {
    if (!onChange) {
      return;
    }
    var values = getValues();
    var isActive = values.indexOf(inputVal) !== -1;
    if (type === "radio") {
      if (!isActive && onChange)
        onChange(inputVal, event);
      return;
    }
    if (isActive) {
      onChange(values.filter(function(n) {
        return n !== inputVal;
      }), event);
    } else {
      onChange([].concat(values, [inputVal]), event);
    }
  };
  !(type !== "radio" || !!name) ? true ? (0, import_invariant.default)(false, 'A `name` is required to group the toggle buttons when the `type` is set to "radio"') : (0, import_invariant.default)(false) : void 0;
  return import_react62.default.createElement(ButtonGroup_default, _extends({}, controlledProps, {
    ref,
    toggle: true
  }), map(children, function(child) {
    var values = getValues();
    var _child$props = child.props, childVal = _child$props.value, childOnChange = _child$props.onChange;
    var handler = function handler2(e) {
      return handleToggle(childVal, e);
    };
    return import_react62.default.cloneElement(child, {
      type,
      name: child.name || name,
      checked: values.indexOf(childVal) !== -1,
      onChange: createChainedFunction_default(childOnChange, handler)
    });
  }));
});
ToggleButtonGroup.defaultProps = defaultProps27;
ToggleButtonGroup.Button = ToggleButton_default;
var ToggleButtonGroup_default = ToggleButtonGroup;

// node_modules/react-bootstrap/esm/Tooltip.js
var import_classnames38 = __toESM(require_classnames());
var import_react63 = __toESM(require_react());
var import_isRequiredForA11y3 = __toESM(require_isRequiredForA11y());
var defaultProps28 = {
  placement: "right"
};
var Tooltip = import_react63.default.forwardRef(function(_ref, ref) {
  var bsPrefix = _ref.bsPrefix, placement = _ref.placement, className = _ref.className, style = _ref.style, children = _ref.children, arrowProps = _ref.arrowProps, _ = _ref.popper, _2 = _ref.show, props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "placement", "className", "style", "children", "arrowProps", "popper", "show"]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "tooltip");
  var _ref2 = (placement == null ? void 0 : placement.split("-")) || [], primaryPlacement = _ref2[0];
  return import_react63.default.createElement("div", _extends({
    ref,
    style,
    role: "tooltip",
    "x-placement": primaryPlacement,
    className: (0, import_classnames38.default)(className, bsPrefix, "bs-tooltip-" + primaryPlacement)
  }, props), import_react63.default.createElement("div", _extends({
    className: "arrow"
  }, arrowProps)), import_react63.default.createElement("div", {
    className: bsPrefix + "-inner"
  }, children));
});
Tooltip.defaultProps = defaultProps28;
Tooltip.displayName = "Tooltip";
var Tooltip_default = Tooltip;
export {
  Accordion_default as Accordion,
  AccordionCollapse_default as AccordionCollapse,
  AccordionContext_default as AccordionContext,
  AccordionToggle_default as AccordionToggle,
  Alert_default as Alert,
  Badge_default as Badge,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  ButtonToolbar_default as ButtonToolbar,
  Card_default as Card,
  CardColumns_default as CardColumns,
  CardDeck_default as CardDeck,
  CardGroup_default as CardGroup,
  CardImg_default as CardImg,
  Carousel_default as Carousel,
  CarouselItem_default as CarouselItem,
  CloseButton_default as CloseButton,
  Col_default as Col,
  Collapse_default as Collapse,
  Container_default as Container,
  Dropdown_default as Dropdown,
  DropdownButton_default as DropdownButton,
  Fade_default as Fade,
  Figure_default as Figure,
  Form_default as Form,
  FormCheck_default as FormCheck,
  FormControl_default as FormControl,
  FormFile_default as FormFile,
  FormGroup_default as FormGroup,
  FormLabel_default as FormLabel,
  FormText_default as FormText,
  Image_default as Image,
  InputGroup_default as InputGroup,
  Jumbotron_default as Jumbotron,
  ListGroup_default as ListGroup,
  ListGroupItem_default as ListGroupItem,
  Media_default as Media,
  Modal_default2 as Modal,
  ModalBody_default as ModalBody,
  ModalDialog_default as ModalDialog,
  ModalFooter_default as ModalFooter,
  ModalTitle_default as ModalTitle,
  Nav_default as Nav,
  NavDropdown_default as NavDropdown,
  NavItem_default as NavItem,
  NavLink_default as NavLink,
  Navbar_default as Navbar,
  NavbarBrand_default as NavbarBrand,
  Overlay_default2 as Overlay,
  OverlayTrigger_default as OverlayTrigger,
  PageItem_default as PageItem,
  Pagination_default as Pagination,
  Popover_default as Popover,
  PopoverContent_default as PopoverContent,
  PopoverTitle_default as PopoverTitle,
  ProgressBar_default as ProgressBar,
  ResponsiveEmbed_default as ResponsiveEmbed,
  Row_default as Row,
  SafeAnchor_default as SafeAnchor,
  Spinner_default as Spinner,
  SplitButton_default as SplitButton,
  Tab_default as Tab,
  TabContainer_default as TabContainer,
  TabContent_default as TabContent,
  TabPane_default as TabPane,
  Table_default as Table,
  Tabs_default as Tabs,
  ThemeProvider_default as ThemeProvider,
  Toast_default as Toast,
  ToastBody_default as ToastBody,
  ToastHeader_default as ToastHeader,
  ToggleButton_default as ToggleButton,
  ToggleButtonGroup_default as ToggleButtonGroup,
  Tooltip_default as Tooltip,
  useAccordionToggle
};
//# sourceMappingURL=react-bootstrap.js.map
